<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>IT on uzak.github.io</title><link>http://uzak.github.io/tags/it/</link><description>Recent content in IT on uzak.github.io</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 28 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://uzak.github.io/tags/it/index.xml" rel="self" type="application/rss+xml"/><item><title>Umeligence</title><link>http://uzak.github.io/post/2024-04-28-umeligence/</link><pubDate>Sun, 28 Apr 2024 00:00:00 +0000</pubDate><guid>http://uzak.github.io/post/2024-04-28-umeligence/</guid><description>&lt;p>&lt;a href="https://www.umeligence.cz/chatgpt-zaklady">src&lt;/a>&lt;/p>
&lt;h2 id="první-kroky-s-chatgpt">První kroky s ChatGPT&lt;/h2>
&lt;h3 id="co-chatgpt-není">Co ChatGPT není?&lt;/h3>
&lt;ul>
&lt;li>ChatGPT není vědomá entita. Jde pouze o program, který přečetl nesmírné množství knih a článků, a je tak dobře vybaven v oblasti zpracování jazyka.&lt;/li>
&lt;li>Nemá vlastní myšlenky, pocity ani zájmy.&lt;/li>
&lt;li>Není ani výpočetní stroj, takže od něj nelze očekávat počítání odmocnin nebo největších prvočísel, ale může ti vysvětlit, jak se tyto věci počítají. Protože o tom hodně četl.&lt;/li>
&lt;/ul>
&lt;h3 id="píše-chatgpt-vždy-pravdu">Píše ChatGPT vždy pravdu?&lt;/h3>
&lt;ul>
&lt;li>S naprostou přesvědčivostí si cucá z digitálního prstu nesmysly.&lt;/li>
&lt;li>úkolem je generovat přirozeně znějící text&lt;/li>
&lt;li>Nelze přikázat ChatGPT, aby si nevymýšlel. Nezbývá než po něm všechno kontrolovat.&lt;/li>
&lt;/ul>
&lt;h3 id="učí-se-chatgpt-z-toho-co-mu-uživatelé-napíšou">Učí se ChatGPT z toho, co mu uživatelé napíšou?&lt;/h3>
&lt;ul>
&lt;li>sám o sobě neprovádí žádné další učení – to znamená, že z konverzací se přímo neučí. Písmeno „P“ ve zkratce „GPT“ znamená předtrénovaný, takže Neučenko je jeho jméno.&lt;/li>
&lt;/ul>
&lt;h3 id="pamatuje-si-chatgpt-co-jsem-dřív-psal">Pamatuje si ChatGPT, co jsem dřív psal?&lt;/h3>
&lt;ul>
&lt;li>V každém novém vlákně začínáš od nuly. ChatGPT nemá páru o tom, co jsi psal jinde&lt;/li>
&lt;li>Ovšem i v rámci jednoho vlákna vnímá jen posledních několik tisíc slov.&lt;/li>
&lt;li>Bezplatná verze GPT‑3.5 pojme zhruba 3000 slov (českých) a GPT‑4 dokonce 11 tisíc, takže potíže s AI‑zheimerem ustupují. Pro zajímavost, konkurenční Claude pojme textu 4× tolik. A nejnovější Gemini 1.5 Pro dokonce 30× tolik.&lt;/li>
&lt;/ul>
&lt;h2 id="tipy-příklady-promptů-a-inspirace">Tipy, příklady promptů a inspirace&lt;/h2>
&lt;h3 id="jak-správně-formulovat-otázky-pro-chatgpt">Jak správně formulovat otázky pro ChatGPT&lt;/h3>
&lt;ul>
&lt;li>Považuj zkrátka chatbota jako nezkušeného zaměstnance – juniora. S tím rozdílem, že když junior špatně pochopí zadání, je blbej on, když ho špatně pochopí ChatGPT, blbě jsi ho napsal ty :-)&lt;/li>
&lt;li>pokládat jasné, stručné a konkrétní otázky (vágní nebo otevřené otázky vedou k tomu, že ChatGPT bude hádat)&lt;/li>
&lt;li>poskytnout co nejvíce informací a souvislostí (ale příliš mnoho informací může být zahlcujících a matoucích)&lt;/li>
&lt;li>vyhni se nejednoznačnostem nebo slangu, snížíš tím riziko, že špatně pochopí otázku&lt;/li>
&lt;/ul>
&lt;h3 id="step-by-step-ooh-baby">Step by step, ooh, baby&lt;/h3>
&lt;ul>
&lt;li>Chceš aby ti asistoval při psaní blogpostu? Nech ho nejprve navrhnout osnovu. Pak rozpracovávej body, které ti připadají zajímavé.&lt;/li>
&lt;li>Nebo chceš vylepšit svůj text? Nejprve požádej o návrhy, co by se mohlo vylepšit. Pak s ním prober, jak to vylepšit. A až nakonec nech ChatGPT změny zapracovat.&lt;/li>
&lt;/ul>
&lt;h3 id="nenech-ho-věštit">Nenech ho věštit&lt;/h3>
&lt;ul>
&lt;li>jakmile se dá něco vyložit různě, výsledek nebude moc dobrý. Proto si dej záležet a napiš prompt tak, aby bylo jasné, co chceš. ChatGPT není Sherlock Holmes.&lt;/li>
&lt;li>je dobrý nápad se přímo zeptat, jestli je tvé zadání dostatečně jasné&lt;/li>
&lt;/ul>
&lt;h3 id="pouze-potvrď">Pouze potvrď&lt;/h3>
&lt;ul>
&lt;li>na konci instrukce napíšu: „Odpověz pouze OK.“&lt;/li>
&lt;/ul>
&lt;h3 id="vdechni-mu-styl">Vdechni mu styl&lt;/h3>
&lt;ul>
&lt;li>&lt;em>Budeme psát povídku. Tón textu ať je živý, vtipný, atraktivní.&lt;/em>&lt;/li>
&lt;li>&lt;em>Jsi vzdělaný, zkušený, inteligentní a máš výjimečný cit pro jazyk. Píšeš texty srozumitelné a čtivé. Pokud používáš odbornou terminologii, jasně ji vysvětli. Tvůj text musí pochopit i zedník po třetí skleničce. Píšeš pro webové stránky. Čtenáře musíš rychle zaujmout.&lt;/em>&lt;/li>
&lt;/ul>
&lt;h3 id="triky-zkušených-copywriterů">Triky zkušených copywriterů&lt;/h3>
&lt;ul>
&lt;li>&lt;em>Budeme psát popis produktu XYZ, který vysvětlí jeho klíčové vlastnosti a výhody. Nepoužívej superlativy, vynech všechny prázdné marketingové fráze a klišé. Nahraď je atraktivními příběhy, jejichž aktérem bude sám čtenář. Tón textu bude živý a poutavý.&lt;/em>&lt;/li>
&lt;li>&lt;em>Navrhni 10 variant lákavých titulků pro text článek. Použij clickbaitové triky seniorních copywriterů.&lt;/em>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>Scrimba: Learn React</title><link>http://uzak.github.io/post/2023-06-06-scrimba_learn_react/</link><pubDate>Tue, 06 Jun 2023 00:00:00 +0000</pubDate><guid>http://uzak.github.io/post/2023-06-06-scrimba_learn_react/</guid><description>&lt;p>&lt;a href="https://scrimba.com/learn/learnreact/">source&lt;/a>&lt;/p>
&lt;h2 id="intro">Intro&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>The easiest way to learn something is the hard way&lt;/strong>
&lt;ul>
&lt;li>learn by doing&lt;/li>
&lt;li>avoid &amp;ldquo;tutorial hell&amp;rdquo; by watching&lt;/li>
&lt;li>school: goal of learning is good grade. Here to be able to write react code.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Repetition is your best friend when it comes to learn something
&lt;ul>
&lt;li>Don&amp;rsquo;t binge the course&lt;/li>
&lt;li>Your brain needs rest. Take breaks often.&lt;/li>
&lt;li>Re-watch past lessons. Esp. when stuck.&lt;/li>
&lt;li>Ask community on discord, if in doubt.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>First thing to learn: how to think in react? React changes the game in terms of how you build the applications.&lt;/li>
&lt;/ul>
&lt;h2 id="build-a-react-info-site">Build a React info site&lt;/h2>
&lt;ul>
&lt;li>Why React?
&lt;ul>
&lt;li>Allows to write composable code.&lt;/li>
&lt;li>It&amp;rsquo;s declarative (as opposed to imperative). How it is done is not required.&lt;/li>
&lt;li>Actively maintained by skilled people&lt;/li>
&lt;li>Hireable skill&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="jsx">JSX&lt;/h3>
&lt;ul>
&lt;li>JSX - JavaScript XML. Flavour of javascript that looks like HTML.&lt;/li>
&lt;li>Allows to write HTML inside of JS.&lt;/li>
&lt;li>&lt;code>console.log(JSXObj)&lt;/code> shows the JS structure behind it.&lt;/li>
&lt;li>With JSX we need to make sure we&amp;rsquo;re returning only a single (parent) element.&lt;/li>
&lt;li>Dependencies required (&lt;code>package.json&lt;/code>):
&lt;ul>
&lt;li>&lt;code>react&lt;/code>&lt;/li>
&lt;li>&lt;code>react-dom&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#a6e22e">React&lt;/span> &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;react&amp;#34;&lt;/span> &lt;span style="color:#75715e">// make JSX syntax work; no longer required with react &amp;gt;= 17
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#a6e22e">ReactDOM&lt;/span> &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;react-dom/client&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">root&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">ReactDOM&lt;/span>.&lt;span style="color:#a6e22e">createRoot&lt;/span>(document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;root&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">render&lt;/span>(&lt;span style="color:#a6e22e">myComponent&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>A component is a function returning JSX UI. For components we use PascaCase for names.&lt;/li>
&lt;li>For styling use &lt;code>className&lt;/code> instead of &lt;code>class&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://vitejs.dev/">Vite&lt;/a> takes care of:
&lt;ul>
&lt;li>transpilation (Babel)&lt;/li>
&lt;li>Bundling (webpack, parcel, rollup, &lt;strong>esbuild&lt;/strong>)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Install nvm:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nvm install --lts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm create vite@latest &lt;span style="color:#75715e"># name: `vite-react`, select `react` twice&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd vite-react
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm install
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm run dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>teach the bundler will adapt to find actual images/css:
&lt;ul>
&lt;li>&lt;code>import logo from &amp;quot;./scrimba-log.png&amp;quot;&lt;/code>&lt;/li>
&lt;li>&lt;code>&amp;lt;img src={logo}/&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>import &amp;quot;./App.css&amp;quot;&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://fonts.google.com/">Google Fonts&lt;/a>. Put above the CSS link:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">link&lt;/span> &lt;span style="color:#a6e22e">rel&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;preconnect&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://fonts.googleapis.com&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">link&lt;/span> &lt;span style="color:#a6e22e">rel&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;preconnect&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://fonts.gstatic.com&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">crossorigin&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">link&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&amp;amp;display=swap&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">rel&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;stylesheet&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>CSS for navbar:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">*&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">box-sizing&lt;/span>: &lt;span style="color:#66d9ef">border-box&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">body&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">margin&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">font-family&lt;/span>: Inter, &lt;span style="color:#66d9ef">sans-serif&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">nav&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">display&lt;/span>: &lt;span style="color:#66d9ef">flex&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">align-items&lt;/span>: &lt;span style="color:#66d9ef">center&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">90&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">30&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">25&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">nav--logo_text&lt;/span>&lt;span style="color:#f92672">,&lt;/span> .&lt;span style="color:#a6e22e">nav--title&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">margin&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">nav--logo_text&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">margin-right&lt;/span>: &lt;span style="color:#66d9ef">auto&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">nav--icon&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">30&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">margin-right&lt;/span>: &lt;span style="color:#ae81ff">7&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">main--title&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">margin&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">letter-spacing&lt;/span>: &lt;span style="color:#ae81ff">-0.05&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">main--facts&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">margin-top&lt;/span>: &lt;span style="color:#ae81ff">46&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">max-width&lt;/span>: &lt;span style="color:#ae81ff">400&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">main--facts&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">li&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">line-height&lt;/span>: &lt;span style="color:#ae81ff">19&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> padding-block: &lt;span style="color:#ae81ff">10&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">main--facts&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">li&lt;/span>::&lt;span style="color:#a6e22e">marker&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">font-size&lt;/span>: &lt;span style="color:#ae81ff">1.4&lt;/span>&lt;span style="color:#66d9ef">rem&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">main&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">background-image&lt;/span>: url(&lt;span style="color:#e6db74">&amp;#34;./images/react-icon-large.png&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">background-repeat&lt;/span>: &lt;span style="color:#66d9ef">no-repeat&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">background-position&lt;/span>: &lt;span style="color:#66d9ef">right&lt;/span> &lt;span style="color:#ae81ff">75&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>npm run build&lt;/code> - tell webpack to build our files and get them ready for prod.&lt;/li>
&lt;/ul>
&lt;h2 id="build-a-airbnb-experience-clone">Build a AirBnB experience clone&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.figma.com/file/4YjrygFEXOcDp9AAnVFv7o/Airbnb-Experiences?node-id=0%3A1">Figma file&lt;/a>&lt;/li>
&lt;li>Topics:
&lt;ul>
&lt;li>Props&lt;/li>
&lt;li>Create components from an array&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>use &lt;code>{variable}&lt;/code> to interpolate variables in JSX. Anything within will be interpreted as regular JS code. Yet it is more readable to do the JS operations outside and only interpolate variables.&lt;/li>
&lt;li>ES6 and later support destructuring: &lt;code>const {img, name} = person&lt;/code>; within a function definition: &lt;code>function Contact({img, name}) {...}&lt;/code>&lt;/li>
&lt;li>Conditional rendering: &lt;code>{condition &amp;amp;&amp;amp; &amp;lt;h1&amp;gt;Setup: {props.setup}&amp;lt;/h1&amp;gt;}&lt;/code>&lt;/li>
&lt;li>Pass on other datatypes than strings: &lt;code>&amp;lt;Joke setup=&amp;quot;...&amp;quot; votes={2} comments=[{author: &amp;quot;...&amp;quot;, body: &amp;quot;...&amp;quot;, liked: true}]/&amp;gt;&lt;/code>&lt;/li>
&lt;li>Compute a html attribute &lt;code>&amp;lt;img src={`../images/${props.img}`}/&amp;gt;&lt;/code>&lt;/li>
&lt;li>Add a prop &lt;code>key&lt;/code> and set it to something unique anytime when using &lt;code>map()&lt;/code>.&lt;/li>
&lt;li>One of the reasons why React is popular is that it is just JS. No extra Markup language.&lt;/li>
&lt;li>Pass on all properties of an item using spread syntax: &lt;code>&amp;lt;Card key={item.id} {...item}/&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="build-a-meme-generator">Build a Meme generator&lt;/h2>
&lt;ul>
&lt;li>Static web-page: read only, no changes to the data.&lt;/li>
&lt;li>Dynamic Web Apps: read and write. User can change the data that drives the webpage. Highly interactive.&lt;/li>
&lt;li>Topics:
&lt;ul>
&lt;li>Event Listeners&lt;/li>
&lt;li>State&lt;/li>
&lt;li>Conditional Rendering&lt;/li>
&lt;li>Forms&lt;/li>
&lt;li>Side Effects&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://www.figma.com/file/MoLwFPHNHJVrzdFurxHzNV/Meme-Generator?type=design&amp;amp;node-id=2-2&amp;amp;t=corXruFlC0FYfl8J-0">Project figma&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://react.dev/learn/responding-to-events#adding-event-handler">Event handling&lt;/a>: within the functional Component, define a handler function and pass it to appropriate attribute, e.g.: &lt;code>onClick={clickHandler}&lt;/code>.&lt;/li>
&lt;li>Props: come &amp;ldquo;from above&amp;rdquo;. Just like a function receiving arguments a component is not allowed to modify the props. Props are immutable.&lt;/li>
&lt;li>State: values that are managed by the component. Like a variable declared within a function to help you accomplish something. Values that a component can maintain between render cycles. State is mutable.&lt;/li>
&lt;li>&lt;code>const [value, setter] = React.useState(DEFAULT_VALUE)&lt;/code> is one of the hooks in React.&lt;/li>
&lt;li>When we care about the previous state, we provide a callback function to the &lt;code>setter&lt;/code> function and it must return the new value. The one parameter to the callback is the &lt;code>prevValue&lt;/code>. This is so react can guarantee that we&amp;rsquo;ll receive the most recent value. E.g. &lt;code>setCount(prev =&amp;gt; prev + 1)&lt;/code>. We should never modify the state but return a new value.&lt;/li>
&lt;li>When we don&amp;rsquo;t care about the previous state we can use the &lt;code>setter&lt;/code> directly, e.g. &lt;code>setCount(42)&lt;/code>.&lt;/li>
&lt;li>Implicit return for object spread syntax: &lt;code>setContact(prevContact =&amp;gt; ({...prevContact, isFavorite: !prevContact.isFavorite}))&lt;/code>&lt;/li>
&lt;li>Whenever state changes React will render the component where the state exists and any child component that relies on the state to work correctly.&lt;/li>
&lt;li>Pass the handler function as callback to the child to have a change done in the parent.&lt;/li>
&lt;li>If you need to pass a data from one component to the other, put it to the parent of the both. An in-built React solution: &lt;a href="https://react.dev/learn/passing-data-deeply-with-context">context&lt;/a>. Other: &lt;a href="https://react-redux.js.org/">redux&lt;/a>.&lt;/li>
&lt;li>Rule of thumb: keep state as local as possible.&lt;/li>
&lt;li>&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/display">CSS display&lt;/a>: &lt;code>display: inline-block; margin-right: 5px&lt;/code> - have elements placed next to each other.&lt;/li>
&lt;li>React style: &lt;code>&amp;lt;div style={{backgroundColor: &amp;quot;red&amp;quot;}}&amp;gt;&lt;/code>. Style must be a JS object and keys need to be camelCased.&lt;/li>
&lt;li>&lt;a href="https://legacy.reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html">You Probably Don&amp;rsquo;t Need Derived State&lt;/a> - state being constructed from a prop.&lt;/li>
&lt;li>&lt;code>array.findIndex(obj =&amp;gt; obj.id === id)&lt;/code> to find the index of a matching obj in an array.&lt;/li>
&lt;li>&lt;a href="https://legacy.reactjs.org/docs/forms.html">Form&lt;/a> handling is one of React&amp;rsquo;s biggest weaknesses.
&lt;ul>
&lt;li>Controlled Component: state you&amp;rsquo;re maintaining in your component should be the single source of truth. Each form component should have a &lt;code>value&lt;/code> attribute, e.g. &lt;code>value={formData.firstName}&lt;/code>.&lt;/li>
&lt;li>React team changed &lt;code>&amp;lt;textarea&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/code> to be a self-enclosed element, e.g. &lt;code>&amp;lt;textarea value={formData.comment} onChange={handleChange} name=&amp;quot;comment&amp;quot; placeholder=&amp;quot;Comments&amp;quot; /&amp;gt;&lt;/code>&lt;/li>
&lt;li>Checkbox: &lt;code>&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;isFriendly&amp;quot; id=&amp;quot;isFriendly&amp;quot; checked={formData.isFriendly} onChange={handleChange}/&amp;gt;&lt;/code> and the label follows: &lt;code>&amp;lt;label htmlFor=&amp;quot;isFriendly&amp;quot;&amp;gt;Are you friendly?&amp;lt;label/&amp;gt;&lt;/code>. &lt;code>handleChange()&lt;/code> needs to take the value of &lt;code>checked&lt;/code> attribute if the type is &lt;code>checkbox&lt;/code>.&lt;/li>
&lt;li>Radiobox: &lt;code>checked&lt;/code> attribute needs to have a boolean value, therefore &lt;code>checked={formData.employment === &amp;quot;unemployed&amp;quot;}&lt;/code>&lt;/li>
&lt;li>Select &amp;amp; option: &lt;code>&amp;lt;select id=&amp;quot;favColor&amp;quot; value={formData.favColor} onChange={handleChange} name=&amp;quot;favColor&amp;quot;&amp;gt;&lt;/code>.&lt;/li>
&lt;li>Form: &lt;code>&amp;lt;form onSubmit={handleSubmit}&amp;gt;&lt;/code>. First thing we want to do in &lt;code>handleSubmit(event)&lt;/code> is to call &lt;code>event.preventDefault()&lt;/code> so the page is not refreshed. Then the form data can be submitted to an API.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// form handling fct
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">handleChange&lt;/span>(&lt;span style="color:#a6e22e">event&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> {&lt;span style="color:#a6e22e">name&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span>, &lt;span style="color:#a6e22e">checked&lt;/span>, &lt;span style="color:#a6e22e">type&lt;/span>} &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">target&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">setFormData&lt;/span>(&lt;span style="color:#a6e22e">prevFormData&lt;/span> =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...&lt;span style="color:#a6e22e">prevFormData&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a6e22e">name&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#e6db74">&amp;#34;checkbox&amp;#34;&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#a6e22e">checked&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;a href="https://swapi.dev/api/">Star Wars API&lt;/a>&lt;/li>
&lt;li>React&amp;rsquo;s primary tasks:
&lt;ul>
&lt;li>Work with the DOM/browser to render the UI&lt;/li>
&lt;li>Manage state for us between render cycles&lt;/li>
&lt;li>Keep the UI updated whenever state changes occur&lt;/li>
&lt;li>NOT: (out)side effects! Anything outside of React&amp;rsquo;s rage. E.g.:
&lt;ul>
&lt;li>localStorage.&lt;/li>
&lt;li>API/db interactions&lt;/li>
&lt;li>Subscriptions (.e.g. web sockets)&lt;/li>
&lt;li>Syncing 2 different internal states together&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://react.dev/learn/synchronizing-with-effects">Side Effects&lt;/a> in React: &lt;code>useEffect()&lt;/code> (&lt;a href="https://overreacted.io/a-complete-guide-to-useeffect/">complete guide&lt;/a>) - tool to interact with outside of the React&amp;rsquo;s ecosystem.
&lt;ul>
&lt;li>1st param: CB function. Everything inside is guaranteed to be run only after the component has been rendered. CB function always run after the first render.&lt;/li>
&lt;li>2nd param (optional): dependencies array. Values if they changed from one render to other the 1st param will run. &lt;strong>&lt;code>[]&lt;/code> means it will run only once&lt;/strong> (no dependencies to track).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>You really never want to use an async CB function for the &lt;code>React.useEffect&lt;/code>. An async function always returns a promise. So if you want an sync function in &lt;code>useEffect()&lt;/code> define an async function and call it. Doing async operations directly would clash the point below:&lt;/li>
&lt;li>Always cleanup things in the side effect (e.g. event listeners, WS connection etc.). &lt;code>useEffect()&lt;/code> &lt;strong>CB function can return a CB that will do the cleanup.&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="build-a-notes-app-and-a-tenzies-game">Build a notes app and a Tenzies game&lt;/h2>
&lt;h3 id="notes">Notes&lt;/h3>
&lt;ul>
&lt;li>Whenever the state changes, React re-renders the whole component.&lt;/li>
&lt;li>Lazy state initialization. Instead of providing a value for &lt;code>React.useState&lt;/code> provide a function. Any changes made after the initialization won&amp;rsquo;t re-run the function.&lt;/li>
&lt;li>&lt;code>event.stopPropagation()&lt;/code> stops propagating the click event to the parent.&lt;/li>
&lt;li>&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining">JS optional chaining&lt;/a> operator: &lt;code>notes[0]?.id&lt;/code>. Return &lt;code>id&lt;/code> or &lt;code>undefined&lt;/code> if the property before doesn&amp;rsquo;t exist.&lt;/li>
&lt;li>&lt;a href="https://console.firebase.google.com/">Firebase Console&lt;/a>&lt;/li>
&lt;li>&lt;code>firestore.onSnapshot&lt;/code> creates a WS connection with the DB (=&amp;gt; cleanup || memory leak). It returns a function to be called for cleanup.&lt;/li>
&lt;li>2nd parameter to &lt;code>onSnapshot&lt;/code> will be called always whenever there is an change to the 1st argument.&lt;/li>
&lt;li>Debouncing: delay the request for a specified amount of time (e.g. 500ms)&lt;/li>
&lt;/ul>
&lt;h3 id="tenzies">Tenzies&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.figma.com/file/FqsxRUhAaXM4ezddQK0CdR/Tenzies?type=design&amp;amp;node-id=0-1">Figma&lt;/a>&lt;/li>
&lt;li>NOTE: use better names (go simple). &lt;strong>Learn the domain vocabulary before coding&lt;/strong>.&lt;/li>
&lt;li>Keeping two internal peaces of state in-sync with each other is a good reason to use &lt;code>React.useEffect&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/ai/nanoid">nanoid&lt;/a> - unique string ID generator.&lt;/li>
&lt;/ul>
&lt;h3 id="quizzical">Quizzical&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.figma.com/file/E9S5iPcm10f0RIHK8mCqKL/Quizzical-App?type=design&amp;amp;node-id=0-1">figma&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/GastonPerez97/quizzical">source&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>AI and the Illusion of Intelligence</title><link>http://uzak.github.io/post/2023-04-27-ai_and_the_illusion_of_intelligence/</link><pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate><guid>http://uzak.github.io/post/2023-04-27-ai_and_the_illusion_of_intelligence/</guid><description>&lt;p>&lt;a href="https://www.coursera.org/learn/ai-and-the-illusion-of-intelligence">src&lt;/a>&lt;/p>
&lt;h2 id="week-1">Week 1&lt;/h2>
&lt;ul>
&lt;li>Some Curious Experiments
&lt;ul>
&lt;li>In early 1600 William Harvey examined the heart and understood it&amp;rsquo;s a pump.&lt;/li>
&lt;li>A few years after Rene Descartes this concluded that machines cannot think - arrange it&amp;rsquo;s speech so it makes sense - what even the lowest type of man can do.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Alan Turing and the Imitation Game&lt;/li>
&lt;li>Illusion of Intelligence&lt;/li>
&lt;li>Explosion of Big Data&lt;/li>
&lt;/ul>
&lt;h2 id="week-2">Week 2&lt;/h2>
&lt;ul>
&lt;li>The Chomskyan Revolution
&lt;ul>
&lt;li>Generative Gramar.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Descarte&amp;rsquo;s Miracle&lt;/li>
&lt;li>The Fatal Flaw of the Chomskyan Revolution&lt;/li>
&lt;li>Doing Violence to Language: the Ngram&lt;/li>
&lt;/ul>
&lt;h2 id="week-3">Week 3&lt;/h2>
&lt;h3 id="moores-law-does-not-make-the-singularity-likely">Moore&amp;rsquo;s Law Does Not Make the Singularity Likely&lt;/h3>
&lt;ul>
&lt;li>in the film 2001, the main character was the computer HAL, &lt;strong>solution to all the&lt;/strong> main (AI) &lt;strong>challenges&lt;/strong>. Along with these skills came human failings including paranoia and jealousy.&lt;/li>
&lt;li>Singularity - computers will have far surpassed the humans. It will be an event impossible to understand. Our current understanding about world will not help us thinking what comes next and why.&lt;/li>
&lt;li>Kurzweil predicts that Singularity will come 2045.&lt;/li>
&lt;/ul>
&lt;h2 id="week-4">Week 4&lt;/h2>
&lt;h3 id="we-are-not-computers">We are not Computers&lt;/h3>
&lt;ul>
&lt;li>Turing asked: what is computation?&lt;/li>
&lt;li>Turing: Halting Problem - some mathematically well-defined problems cannot be solved by computation.&lt;/li>
&lt;li>We&amp;rsquo;ve been creating algorithms since the dawn of civilization.&lt;/li>
&lt;li>Turing: computing is whatever a Turing machine can do.&lt;/li>
&lt;li>Halting problem&lt;/li>
&lt;li>We&amp;rsquo;ve no reason our brains are computers.&lt;/li>
&lt;li>&lt;strong>HAL is an entity capable of making decisions, having beliefs and pursuing goals. In short HAL is conscious.&lt;/strong>&lt;/li>
&lt;li>Having (rich) internal life -&amp;gt; being conscious.&lt;/li>
&lt;/ul>
&lt;h3 id="an-engine-the-parts-of-which-are-men">An Engine, the Parts of which are Men&lt;/h3>
&lt;ul>
&lt;li>Marx: Factory is engine parts of which are men.&lt;/li>
&lt;li>Adam Smith: the man whose whole life is spent in performing a few simple operations &amp;hellip; becomes as stupid and ignorant as it is possible for a human creature to become&lt;/li>
&lt;li>Jaron Lenier and Sean Parker: social media is making is stupider. Technology can profoundly effect human mental ability and behaviours.&lt;/li>
&lt;li>Marx&amp;rsquo;s factory can be thought of as a computer: from input it produces output. Marx: working in a factory is also reprogramming the workers into slightly changed mass of workers day by day.&lt;/li>
&lt;li>As we develop the technological world, we&amp;rsquo;re able to reprogram out own mentali live in profound ways. This was always true and the process is beginning to accelerate.&lt;/li>
&lt;/ul>
&lt;h3 id="from-gilligans-island-to-lost">From Gilligan&amp;rsquo;s Island to Lost&lt;/h3>
&lt;ul>
&lt;li>Simple vs. complex (challenging plots and storytelling of 2004&amp;rsquo;s Lost)&lt;/li>
&lt;li>Creators of Gilligan&amp;rsquo;s Island (show from &amp;rsquo;60s) were concerned the show would be too complex for the people to follow.&lt;/li>
&lt;/ul>
&lt;h3 id="a-new-kind-of-being">A New Kind of Being&lt;/h3>
&lt;ul>
&lt;li>The more AI develops the more it will develop changes in human intelligence and abilities.&lt;/li>
&lt;li>John McCarthy: Intelligence: &amp;ldquo;the computational part of the ability to achieve goals in the world&amp;rdquo;&lt;/li>
&lt;li>What people are able to do very much depends on what technological tools they&amp;rsquo;re able to use.&lt;/li>
&lt;li>Not AI, but &lt;strong>IA - intelligence augmentation&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;h3 id="re-wiring-the-human-parts">Re-wiring the Human Parts&lt;/h3>
&lt;ul>
&lt;li>While &lt;strong>all technologies change user, current tech platforms make it much more effectively&lt;/strong>.&lt;/li>
&lt;li>Computer technology becomes more tightly integrated with the human uiser.&lt;/li>
&lt;/ul>
&lt;h3 id="a-new-kind-of-being-1">A New Kind of Being&lt;/h3>
&lt;ul>
&lt;li>Can AI reach the human level of intelligence? Wrong question!&lt;/li>
&lt;li>Development of AI is development of human intelligence.&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>learnprompting.org</title><link>http://uzak.github.io/post/2023-04-27-learnprompting.org/</link><pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate><guid>http://uzak.github.io/post/2023-04-27-learnprompting.org/</guid><description>&lt;p>&lt;a href="https://learnprompting.org/">src&lt;/a>&lt;/p>
&lt;h2 id="basics">Basics&lt;/h2>
&lt;h3 id="introduction">Introduction&lt;/h3>
&lt;ul>
&lt;li>Often AIs are like very smart 5-years old. They can do a lot of things, but need careful instructions to do them well.&lt;/li>
&lt;li>AI can automate tasks that cost you countless hours now.&lt;/li>
&lt;/ul>
&lt;h3 id="prompting">Prompting&lt;/h3>
&lt;h3 id="giving-instructions">Giving Instructions&lt;/h3>
&lt;h3 id="role-prompting">Role Prompting&lt;/h3>
&lt;ul>
&lt;li>Assign a role to a the AI. E.g.: &amp;ldquo;You&amp;rsquo;re a lawyer&amp;rdquo;.&lt;/li>
&lt;li>&lt;a href="https://github.com/f/awesome-chatgpt-prompts#prompts">Awesome ChatGPT prompts&lt;/a>&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h3 id="few-shot-prompting">Few shot prompting&lt;/h3>
&lt;pre tabindex="0">&lt;code>shot: result
shot: result
shot: other_result
shot
&lt;/code>&lt;/pre>&lt;p>Present sample, present expected output, let it do more.
{0,1,few} shot prompting&lt;/p></description></item><item><title>Review whole codebase easily</title><link>http://uzak.github.io/post/2023-01-26-review_whole_codebase/</link><pubDate>Thu, 26 Jan 2023 00:00:00 +0000</pubDate><guid>http://uzak.github.io/post/2023-01-26-review_whole_codebase/</guid><description>&lt;p>Recently, a student asked me to review a small project hosted on GitHub. Initially, I assumed I would use the Pull Request/Code Review functionality of GitHub to do so. I found an easy &lt;a href="https://www.exasol.com/resource/how-to-do-a-full-review-of-your-repository-contents-on-github/">way&lt;/a> to perform it on the whole codebase.&lt;/p>
&lt;p>However, I eventually decided that I wanted to have a broader view, rather than just looking at a small portion of the changes through the Code Review&amp;rsquo;s microscope. Utilizing an IDE that could visualize the connections in the code and show how things were being used and defined also helped me a lot.&lt;/p></description></item><item><title>CS50 React Native</title><link>http://uzak.github.io/post/2022-11-09-cs50_react_native/</link><pubDate>Wed, 09 Nov 2022 00:00:00 +0000</pubDate><guid>http://uzak.github.io/post/2022-11-09-cs50_react_native/</guid><description>&lt;p>&lt;a href="https://www.youtube.com/watch?v=X52b-8y2Hf4&amp;amp;list=PLLea03u4b2pZY6paU-jlGzuHHURF-5kFm">Youtube&lt;/a>&lt;/p>
&lt;h2 id="lecture-0-js">Lecture 0: JS&lt;/h2>
&lt;p>&lt;a href="https://cdn.cs50.net/mobile/2018/spring/lectures/0/lecture0.pdf">slides&lt;/a>&lt;/p>
&lt;ul>
&lt;li>Introduction&lt;/li>
&lt;li>Course information&lt;/li>
&lt;li>Syntax&lt;/li>
&lt;li>Types
&lt;ul>
&lt;li>dynamic types&lt;/li>
&lt;li>primitive types (no methods, immutable)
&lt;ul>
&lt;li>undefined&lt;/li>
&lt;li>null&lt;/li>
&lt;li>boolean&lt;/li>
&lt;li>number&lt;/li>
&lt;li>string&lt;/li>
&lt;li>(symbol)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>objects&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Typecasting
&lt;ul>
&lt;li>explicit&lt;/li>
&lt;li>implicit&lt;/li>
&lt;li>== (coerces the types) vs === (requires equivalent types)&lt;/li>
&lt;li>falsy
&lt;ul>
&lt;li>undefined&lt;/li>
&lt;li>null&lt;/li>
&lt;li>false&lt;/li>
&lt;li>+0, -0, NaN&lt;/li>
&lt;li>&amp;quot;&amp;quot;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>truthy
&lt;ul>
&lt;li>{}&lt;/li>
&lt;li>[]&lt;/li>
&lt;li>everything else&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Type demo
&lt;ul>
&lt;li>typeof operator&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Objects
&lt;ul>
&lt;li>&lt;code>const o = new Object()&lt;/code> OR &lt;code>const o2 = {}; o2.firstName = ''&lt;/code> OR &lt;code>const o3 = { firstName: '', greet(): function() {} }&lt;/code>&lt;/li>
&lt;li>Arrays, Functions - are objects&lt;/li>
&lt;li>Everything but primitive datatypes are objects&lt;/li>
&lt;li>Anything between [] when indexing will be coerced to a string. E.g. &lt;code>o[1]&lt;/code> -&amp;gt; &lt;code>o[&amp;quot;1&amp;quot;]&lt;/code>&lt;/li>
&lt;li>Primitives are immutable, objects are mutable and stored by reference&lt;/li>
&lt;li>&lt;code>Object.assign({}, o)&lt;/code> -&amp;gt; shallowCopy. Merges 1st arg into o.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Objects demo&lt;/li>
&lt;li>Object mutation
&lt;ul>
&lt;li>&lt;code>Object.assign(target, source)&lt;/code>: The Object.assign() method copies all enumerable own properties from one or more source objects to a target object. It returns the modified target object.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Prototypical inheritance
&lt;ul>
&lt;li>Each objects stores a reference to its prototype (&lt;code>obj.__proto__&lt;/code>)&lt;/li>
&lt;li>Properties/methods defined most tightly have most priority&lt;/li>
&lt;li>JS will automatically &amp;ldquo;box&amp;rdquo; (wrap) primitive values so you have access to methods.
&lt;ul>
&lt;li>&lt;code>42 instanceof Number&lt;/code> -&amp;gt; &lt;code>false&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Prototypical inheritance (reference to prototype instead of copies) is used to save resources.&lt;/li>
&lt;li>Danger: if you change the prototype it changes for every single value of that type. &lt;strong>DON&amp;rsquo;T change prototype&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Scope
&lt;ul>
&lt;li>variable lifetime
&lt;ul>
&lt;li>lexical scoping (var): declared until their function ends&lt;/li>
&lt;li>block scoping (const, let)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>variables without cost/let are global&lt;/li>
&lt;li>hoisting - take the definition and hoist it to the top of the file
&lt;ul>
&lt;li>var declaration&lt;/li>
&lt;li>function definition&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>JS engine
&lt;ul>
&lt;li>read entire file, throw a syntax error if found and store functions will be saved in memory&lt;/li>
&lt;li>execute it&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Global Object
&lt;ul>
&lt;li>all variables and functions are parameters and methods on the global object:
&lt;ul>
&lt;li>Browser: &lt;code>window&lt;/code>&lt;/li>
&lt;li>Node.js: &lt;code>global&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Closures
&lt;ul>
&lt;li>functions that refer to variables declared by parent function&lt;/li>
&lt;li>possible because of scoping&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="lecture-1-js-es6">Lecture 1: JS, ES6&lt;/h2>
&lt;p>&lt;a href="https://cdn.cs50.net/mobile/2018/spring/lectures/1/lecture1.pdf">slides&lt;/a>&lt;/p></description></item><item><title>CS50's Introduction to Artificial Intelligence with Python</title><link>http://uzak.github.io/post/2022-10-17-harvardx_cs50ai/</link><pubDate>Mon, 17 Oct 2022 00:00:00 +0000</pubDate><guid>http://uzak.github.io/post/2022-10-17-harvardx_cs50ai/</guid><description>&lt;p>&lt;a href="https://cs50.harvard.edu/ai/2020/">src&lt;/a>&lt;/p>
&lt;h2 id="search">Search&lt;/h2>
&lt;p>general pattern:&lt;/p>
&lt;ul>
&lt;li>begin&lt;/li>
&lt;li>correct sequence of actions&lt;/li>
&lt;li>goal&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>agent&lt;/strong> - perceives the environment and acts upon the environment&lt;/p>
&lt;p>&lt;strong>state&lt;/strong> - configuration of the environment&lt;/p>
&lt;p>&lt;strong>initial state&lt;/strong>&lt;/p>
&lt;p>&lt;strong>actions&lt;/strong> - choices taken in any given state. fuctions. ACTIONS(s) -&amp;gt; set of actions that can be done in given state.&lt;/p>
&lt;p>&lt;strong>transition model&lt;/strong>. RESULT(s, a) -&amp;gt; state after performing action &lt;code>a&lt;/code> in state &lt;code>s&lt;/code>&lt;/p>
&lt;p>&lt;strong>state space&lt;/strong>. graph&lt;/p>
&lt;p>&lt;strong>goal state&lt;/strong>. determines whether a state is a goal state.&lt;/p></description></item><item><title>Remote</title><link>http://uzak.github.io/post/2022-04-24-remote/</link><pubDate>Sun, 24 Apr 2022 00:00:00 +0000</pubDate><guid>http://uzak.github.io/post/2022-04-24-remote/</guid><description>&lt;h2 id="the-time-is-right-for-remote-work">The Time Is Right for Remote Work&lt;/h2>
&lt;ul>
&lt;li>Office during the day has become the last place where people get their work done.&lt;/li>
&lt;li>Required: ability to be alone with your thoughts.&lt;/li>
&lt;li>Stop commuting your life away - commutes make you fat, stressed and miserable.&lt;/li>
&lt;li>Escaping 9am-5pm: synchronous -&amp;gt; asynchronous&lt;/li>
&lt;li>End of city monopoly
&lt;ul>
&lt;li>Industrialism (factories): gather a large number of people into small area.&lt;/li>
&lt;li>life need not be divided into arbitrary phases: work and retirement&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Talent isn&amp;rsquo;t bound by the hubs
&lt;ul>
&lt;li>It&amp;rsquo;s not about the money - promote quality of life, getting best people available&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="dealing-with-excuses">Dealing with Excuses&lt;/h2>
&lt;ul>
&lt;li>If you&amp;rsquo;re struggling with trust issues, you&amp;rsquo;ve made a poor hiring decision. We have no desire to be babysitters during the day.&lt;/li>
&lt;li>Most people want to work as long as it&amp;rsquo;s stimulating and fulfilling. If you&amp;rsquo;re stuck in a dead-end job that has no prospects of being either, then you don&amp;rsquo;t need just a remote position, you need a new job.&lt;/li>
&lt;li>Forcing everyone into the office every day is an organizational SPoF.&lt;/li>
&lt;li>Reptilian resistance is not rational but deeply emotional. Fight or flight.&lt;/li>
&lt;li>Good for hours of overlap to avoid collaboration delays and feel like a team.&lt;/li>
&lt;li>Seeing is believing: Record a screencast (animated gif, youtube etc.) and narrate the experience.&lt;/li>
&lt;li>Meetings and managers - are actually the greatest causes of work not getting done at the office.&lt;/li>
&lt;/ul>
&lt;h3 id="big-business">Big business&lt;/h3>
&lt;ul>
&lt;li>Many big businesses get away with staggering amounts of inefficiency and bureaucracy and seem fine for years. What you need is confidence that you see a smarter way.&lt;/li>
&lt;li>You&amp;rsquo;re in the game to find the best way to work. The most productive and happiness-inducting setup wins.&lt;/li>
&lt;/ul>
&lt;h3 id="culture">Culture&lt;/h3>
&lt;ul>
&lt;li>The stronger the culture the less explicit training and supervision is needed.&lt;/li>
&lt;li>Best cultures derive from actions people actually take, not the ones they write in the mission statements.&lt;/li>
&lt;/ul>
&lt;h3 id="i-need-an-answer-now">I need an answer now&lt;/h3>
&lt;ul>
&lt;li>too many interruptions - little gets done.&lt;/li>
&lt;li>There is nothing more arrogant than taking up someone else&amp;rsquo;s time with a question you don&amp;rsquo;t need an answer right now. Email -&amp;gt; IM -&amp;gt; telephone.&lt;/li>
&lt;li>ASAP-free. Use that calm to be even more productive.&lt;/li>
&lt;/ul>
&lt;h3 id="forward-motion">Forward motion&lt;/h3>
&lt;ul>
&lt;li>weekly discussion thread with the subject &amp;ldquo;What have you been working on?&amp;rdquo; Everyone contributes a few lines about past week and what&amp;rsquo;s intended for the next week. It&amp;rsquo;s not a precise, rigorous estimation process. It doesn&amp;rsquo;t attempt to deal with coordination. It simply aims to make everyone feel like they&amp;rsquo;re in the same galley and not their own little rowboat.&lt;/li>
&lt;li>Progress is a joy best shared with coworkers.&lt;/li>
&lt;/ul>
&lt;h3 id="the-work-is-what-matters">The work is what matters&lt;/h3>
&lt;ul>
&lt;li>work itself is the best yardstick to judge someone&amp;rsquo;s performance&lt;/li>
&lt;li>s/what did you do today?/Show me what you did today/&lt;/li>
&lt;/ul>
&lt;h2 id="beware-of-dragons">Beware of Dragons&lt;/h2>
&lt;ul>
&lt;li>Cabin fever is real. Remote work doesn&amp;rsquo;t mean being chained to your home-office desk.&lt;/li>
&lt;li>Solid writing and language skills are required.&lt;/li>
&lt;li>Lessons from open source: triumph of asynchronous collaboration and communication&lt;/li>
&lt;/ul>
&lt;h3 id="ergonomics-basics">Ergonomics Basics&lt;/h3>
&lt;ul>
&lt;li>Proper desk, proper chain, proper screen.&lt;/li>
&lt;li>Adopt a healthy lifestyle.&lt;/li>
&lt;li>Give remote work a real chance or don’t bother at all. It’s okay to start small, but make sure it’s meaningful.&lt;/li>
&lt;/ul>
&lt;h3 id="working-with-clients">Working with clients&lt;/h3>
&lt;ul>
&lt;li>First, when pitching business, let the prospective client know up front that you don&amp;rsquo;t live where they live.&lt;/li>
&lt;li>Second, provide references before the client even asks.&lt;/li>
&lt;li>Third, show them work often.&lt;/li>
&lt;li>Fourth, be very available.&lt;/li>
&lt;li>Lastly, get the client involved and let them follow along. Make sure they feel this is their project too. So their anxieties and fears will be replaced by excitement and anticipation.&lt;/li>
&lt;/ul>
&lt;h3 id="live-moves-on">Live moves on&lt;/h3>
&lt;ul>
&lt;li>most companies have fixation on keeping their workers.&lt;/li>
&lt;li>Keeping a solid team together for a long time is a key to peak performance.&lt;/li>
&lt;/ul>
&lt;h3 id="keep-the-good-times-going">Keep the good times going&lt;/h3>
&lt;ul>
&lt;li>when the bulk of your communication happens via email and the like, it doesn&amp;rsquo;t take much for bad blood to develop unless everyone is making their best effort to the contrary.&lt;/li>
&lt;li>Sentiments are infectious, good or bad.&lt;/li>
&lt;li>No assholes allowed, no drama allowed, no bad vibes allowed.&lt;/li>
&lt;/ul>
&lt;h3 id="the-cost-of-thriving--equal-work-equal-pay">The cost of thriving / equal work equal pay&lt;/h3>
&lt;ul>
&lt;li>If your entire workforce is located in a hot hub and you pay market salaries, you’ll be under constant attack from poachers&lt;/li>
&lt;li>almost unfair advantage in attracting and keeping the best people in the world. So don’t look at remote work as a way to skimp on salaries&lt;/li>
&lt;/ul>
&lt;h3 id="great-remote-workers-are-simply-great-workers">Great remote workers are simply great workers&lt;/h3>
&lt;ul>
&lt;li>two key qualities: smart and GTD&lt;/li>
&lt;li>Beware of mental shortcut: nice person = good workers.&lt;/li>
&lt;/ul>
&lt;h3 id="on-writing-well">On writing well&lt;/h3>
&lt;ul>
&lt;li>first filter that really matters is the cover letter explaining why is there a fit between the company and the applicant. Sometimes you&amp;rsquo;ve less than 10 seconds.&lt;/li>
&lt;li>First clarity, second style.&lt;/li>
&lt;/ul>
&lt;h3 id="test-project">Test project&lt;/h3>
&lt;ul>
&lt;li>never ask people to work for free. Make it meaningful too.&lt;/li>
&lt;li>narrow the field to two or three candidates and meet them in person.&lt;/li>
&lt;/ul>
&lt;h2 id="managing-remote-workers">Managing remote workers&lt;/h2>
&lt;ul>
&lt;li>a great place to start is to allow your current employees to begin working remotely.&lt;/li>
&lt;li>one on ones: check with remote workers more frequently. Ideally every month.&lt;/li>
&lt;/ul>
&lt;h3 id="stop-managing-the-chairs">Stop managing the chairs.&lt;/h3>
&lt;ul>
&lt;li>The job of a manager is not to herd cats, but to lead and verify work.&lt;/li>
&lt;li>When or where someone is doing the work is irrelevant most of the time.&lt;/li>
&lt;/ul>
&lt;h3 id="remove-the-roadblocks-entirely">Remove the roadblocks entirely&lt;/h3>
&lt;ul>
&lt;li>start by empowering everyone to make decisions on their own.&lt;/li>
&lt;li>everyone gets a company credit card and is told to &amp;ldquo;spend wisely&amp;rdquo;.&lt;/li>
&lt;li>no need to ask for permission to go on vacation. Just put in in the calendar and coordinate with coworkers.&lt;/li>
&lt;/ul>
&lt;h3 id="be-on-the-lookout-for-overwork-not-underwork">Be on the lookout for overwork, not underwork&lt;/h3>
&lt;ul>
&lt;li>if work is all-consuming, the worker is far more likely to burn out.&lt;/li>
&lt;li>from May to October, we give everyone an additional weekday.&lt;/li>
&lt;li>sponsor employee&amp;rsquo;s hobbies&lt;/li>
&lt;/ul>
&lt;h2 id="life-as-a-remote-worker">Life as a remote worker&lt;/h2>
&lt;ul>
&lt;li>Morning remote, afternoon local&lt;/li>
&lt;li>Family time is a good way to counterbalance the loss of daily in-person contact with coworkers.&lt;/li>
&lt;li>home office -&amp;gt; coffee shop -&amp;gt; single desk -&amp;gt; plain vanilla single suite.&lt;/li>
&lt;/ul>
&lt;h3 id="building-a-routine">Building a routine&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>separate the clothes you wear depending whether you&amp;rsquo;re in work/play mode&lt;/strong>&lt;/li>
&lt;li>&lt;strong>divide the day into chunks like: catch-up, collaboration and serious work&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>dedicated home office&lt;/strong>. No checking work email or just getting a little more done in the living room or your bedroom&lt;/li>
&lt;li>&lt;strong>One computer for work and another for fun&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>Separate accounts for work and fun&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;h3 id="staying-motivated">Staying motivated&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>motivation is the fuel of intellectual work&lt;/strong>&lt;/li>
&lt;li>&lt;strong>trying to motivate by means of rewards or threats is terribly ineffective&lt;/strong>&lt;/li>
&lt;li>&lt;strong>the only reliable way to muster motivation is to encourage people to work on things they like and care about, with people they like and care about.&lt;/strong> There are no shortcuts.&lt;/li>
&lt;li>Routine has a tendency to numb your creativity.&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>It doesn't have to be crazy at work</title><link>http://uzak.github.io/post/2022-03-29-it_doesnt_have_to_be_crazy_at_work/</link><pubDate>Tue, 29 Mar 2022 00:00:00 +0000</pubDate><guid>http://uzak.github.io/post/2022-03-29-it_doesnt_have_to_be_crazy_at_work/</guid><description>&lt;p>Here are some notes from the marvelous book &lt;a href="https://basecamp.com/books/calm">&amp;ldquo;It doesn&amp;rsquo;t have to be crazy at work&amp;rdquo;&lt;/a>. If you like the notes, please consider buying the book.&lt;/p>
&lt;h1 id="first">First&lt;/h1>
&lt;h2 id="its-crazy-at-work">It&amp;rsquo;s Crazy at Work&lt;/h2>
&lt;ul>
&lt;li>Workday is being sliced into tiny moments by an onslaught of distractions.&lt;/li>
&lt;li>Unhealthy obsession with growth.&lt;/li>
&lt;li>Sustained exhaustion is not a badge of honor, it&amp;rsquo;s a mark of stupidity.&lt;/li>
&lt;li>The answer isn&amp;rsquo;t more hours, it&amp;rsquo;s less bullshit. Less waste, not more production. Fewer distractions.&lt;/li>
&lt;li>No growth at-all-costs. No false busyness. No ego-driven goals.&lt;/li>
&lt;/ul>
&lt;h2 id="your-company-is-a-product">Your Company Is a Product&lt;/h2>
&lt;ul>
&lt;li>Do people who work here know how to use the company? Is it simple?&lt;/li>
&lt;li>We work on projects for six weeks at a time, then we take two weeks off from scheduled work to roam and decompress.&lt;/li>
&lt;/ul>
&lt;h1 id="curb-your-ambition">Curb Your Ambition&lt;/h1>
&lt;h2 id="bury-the-hustle">Bury the Hustle&lt;/h2>
&lt;ul>
&lt;li>You aren&amp;rsquo;t more worthy in defeat or victory because you sacrificed everything.&lt;/li>
&lt;li>You&amp;rsquo;re not very likely to find that key insight or breakthrough idea north of the 14th hour in the day. &lt;strong>Creativity, progress, and impact do not yield to brute force.&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="happy-pacifists">Happy Pacifists&lt;/h2>
&lt;ul>
&lt;li>Just serve their customers.&lt;/li>
&lt;li>All is fair in love and war. Except this isn&amp;rsquo;t love, and it isn&amp;rsquo;t war. It&amp;rsquo;s business.&lt;/li>
&lt;li>We come in peace. We don&amp;rsquo;t have imperial ambitions. We aren&amp;rsquo;t trying to dominate an industry or a market. We wish everyone well. To get ours, we don&amp;rsquo;t need to take theirs.&lt;/li>
&lt;li>Doubling, tripling, quadrupling our market share doesn&amp;rsquo;t matter.&lt;/li>
&lt;li>&lt;strong>Mark Twain: Comparison is the death of joy.&lt;/strong> What others do has no bearing on what we&amp;rsquo;re able to do, what we want to do, or what we choose to do.&lt;/li>
&lt;li>The opposite of conquering the world isn&amp;rsquo;t failure. It&amp;rsquo;s participation. Being one of many options in a market is a virtue that allows customers to have a real choice.&lt;/li>
&lt;li>At the end of the day, would you rather win an imaginary context by throwing sand in your competitors&amp;rsquo; faces or by simply forgetting about them and making the best damn product you know how?&lt;/li>
&lt;/ul>
&lt;h2 id="our-goals-no-goals">Our Goals: No Goals&lt;/h2>
&lt;ul>
&lt;li>Simply do the best work we can on a daily basis.&lt;/li>
&lt;li>Goals are fake. You don&amp;rsquo;t need something fake to do something real.&lt;/li>
&lt;li>Goals are made-up numbers that function as a source of unnecessary stress until they&amp;rsquo;re reached or abandoned. Produce expectations.&lt;/li>
&lt;/ul>
&lt;h2 id="dont-change-the-world">Don&amp;rsquo;t Change the World&lt;/h2>
&lt;ul>
&lt;li>you lift a tremendous burden off yourself and the people around you.&lt;/li>
&lt;li>Ambition hyperinflation: it&amp;rsquo;s no longer about making a great product/service. It&amp;rsquo;s about this BRAND_NEW THING CHANGES EVERYTHING.&lt;/li>
&lt;/ul>
&lt;h2 id="make-it-up-as-you-go">Make It Up as You Go&lt;/h2>
&lt;ul>
&lt;li>We didn&amp;rsquo;t start the business with a plan, and we don&amp;rsquo;t run the business by a plan.&lt;/li>
&lt;li>Every six weeks or so we decide what we&amp;rsquo;ll be working on next.&lt;/li>
&lt;li>Short term plan - you change your mind often. And that&amp;rsquo;s a huge relief. Long term planning instills a false sense of security.&lt;/li>
&lt;li>The best information you&amp;rsquo;ll ever have about a decision is at the moment of execution.&lt;/li>
&lt;/ul>
&lt;h2 id="comfys-cool">Comfy&amp;rsquo;s Cool&lt;/h2>
&lt;ul>
&lt;li>The idea that you have to constantly push yourself out of your comfort zone is the kind of supposedly self-evident nonsense you&amp;rsquo;ll often find in corporate manifestos.&lt;/li>
&lt;li>Most of the time, if you&amp;rsquo;re uncomfortable with something, its&amp;rsquo; because it isn&amp;rsquo;t right.&lt;/li>
&lt;li>If you get into the habit of suppressing all discomfort, you&amp;rsquo;re going to lose yourself, your manners, and your morals.&lt;/li>
&lt;li>Being comfortable in your zone is essential to being calm.&lt;/li>
&lt;/ul>
&lt;h1 id="defend-your-time">Defend Your Time&lt;/h1>
&lt;h2 id="8s-enough-40s-plenty">8&amp;rsquo;s Enough, 40&amp;rsquo;s Plenty&lt;/h2>
&lt;ul>
&lt;li>Most people don&amp;rsquo;t have 8h a day. Time is stolen by meetings, conference calls and other distractions.&lt;/li>
&lt;li>Most of what we think we have to do, we don&amp;rsquo;t have to do at all. It&amp;rsquo;s a choice and often a poor one.&lt;/li>
&lt;li>When you cut out what&amp;rsquo;s unnecessary, you&amp;rsquo;re left with what you need.&lt;/li>
&lt;/ul>
&lt;h2 id="protectionism">Protectionism&lt;/h2>
&lt;ul>
&lt;li>top responsibility to protect our employee&amp;rsquo;s time and attention. Don&amp;rsquo;t expect great work if you don&amp;rsquo;t have a full day&amp;rsquo;s attention to devote it. Partial attention is no attention at all.&lt;/li>
&lt;li>No status meetings at Basecamp. We ask people to write updates daily or weekly for others to read.&lt;/li>
&lt;li>Meetings break time into &amp;ldquo;before&amp;rdquo; and &amp;ldquo;after&amp;rdquo;.&lt;/li>
&lt;/ul>
&lt;h2 id="the-quality-of-an-hour">The Quality of an Hour&lt;/h2>
&lt;ul>
&lt;li>Look at your hours. If they&amp;rsquo;re a bunch of fractions, who or what is doing the division?&lt;/li>
&lt;li>When was the last time you had three or four completely uninterrupted hours to yourself and your work?&lt;/li>
&lt;/ul>
&lt;h2 id="effective--productive">Effective &amp;gt; Productive&lt;/h2>
&lt;ul>
&lt;li>Productivity is for machines, not for people.&lt;/li>
&lt;li>When people focus on productivity, they end up focusing on being busy.&lt;/li>
&lt;li>Being productive is about occupying your time. Being effective is about finding more of your time unoccupied and open for other things besides work.&lt;/li>
&lt;li>It is perfectly OK to have nothing to do. Or, better yet, nothing worth doing. &lt;strong>Not doing something that isn&amp;rsquo;t worth doing is a wonderful way to spend your time.&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="the-outwork-myth">The Outwork Myth&lt;/h2>
&lt;ul>
&lt;li>A great work ethic isn&amp;rsquo;t about working whenever you&amp;rsquo;re called upon. It&amp;rsquo;s about doing what you say you&amp;rsquo;re going to do, putting in a fair day&amp;rsquo;s work, respecting your work, respecting the customer, respecting coworkers, not wasting time, not creating unnecessary work for other people, and not being a bottleneck. &lt;strong>Work ethic is about being a fundamentally good person that others can count on and enjoy working with.&lt;/strong>&lt;/li>
&lt;li>Stop equating work ethic with excessive work hours.&lt;/li>
&lt;/ul>
&lt;h2 id="work-doesnt-happen-at-work">Work Doesn&amp;rsquo;t Happen at Work&lt;/h2>
&lt;ul>
&lt;li>When you really need to get work done you rarely go into the office.&lt;/li>
&lt;li>Modern-day offices have become interruption factories.&lt;/li>
&lt;li>People are working longer and later because they can&amp;rsquo;t get work done at work anymore!&lt;/li>
&lt;/ul>
&lt;h2 id="office-hours">Office Hours&lt;/h2>
&lt;ul>
&lt;li>All subject-matter expects at Basecamp now publish office hours. Like in academia. It&amp;rsquo;s up to each expert to decide their availability.&lt;/li>
&lt;li>What you do when you have a question on Monday and someone&amp;rsquo;s office hours aren&amp;rsquo;t until Thursday? You wait, that&amp;rsquo;s what you do.&lt;/li>
&lt;/ul>
&lt;h2 id="calendar-tetris">Calendar Tetris&lt;/h2>
&lt;ul>
&lt;li>You just can&amp;rsquo;t reach into someone&amp;rsquo;s calendar, find an open slot, and plat your flag.&lt;/li>
&lt;li>Meetings should be the last resort, especially big ones.&lt;/li>
&lt;li>&lt;strong>When someones takes your time, it doesn&amp;rsquo;t cost them anything, but it costs you everything.&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="the-presence-prison">The Presence Prison&lt;/h2>
&lt;ul>
&lt;li>When everyone knows you&amp;rsquo;re &amp;ldquo;available&amp;rdquo;, it&amp;rsquo;s an invitation to be interrupted.&lt;/li>
&lt;li>What if you need something from someone and don&amp;rsquo;t know whether they&amp;rsquo;re available? Just ask them. If the respond, then you have what you need.&lt;/li>
&lt;/ul>
&lt;h2 id="ill-get-back-to-you-whenever">I&amp;rsquo;ll Get Back to You Whenever&lt;/h2>
&lt;ul>
&lt;li>Common thinking: If I can write you quickly, you can get back to me quickly, right? Technically right, practically wrong.&lt;/li>
&lt;li>&lt;strong>Almost everything can wait. And almost everything should.&lt;/strong>&lt;/li>
&lt;li>The culture of eventual response rather than immediate response.&lt;/li>
&lt;li>If someone doesn&amp;rsquo;t get back to you quickly, it&amp;rsquo;s not because they&amp;rsquo;re ignoring you - it&amp;rsquo;s probably because they are working. Don&amp;rsquo;t you have some other work to do while you wait?&lt;/li>
&lt;/ul>
&lt;h2 id="fomo-jomo">FOMO? JOMO!&lt;/h2>
&lt;ul>
&lt;li>Fear of missing out? Joy of missing out!&lt;/li>
&lt;li>There&amp;rsquo;s absolutely no reason everyone needs to attempt to know everything that&amp;rsquo;s going on at our company.&lt;/li>
&lt;/ul>
&lt;h1 id="feed-your-culture">Feed Your Culture&lt;/h1>
&lt;h2 id="were-not-family">We&amp;rsquo;re Not Family&lt;/h2>
&lt;ul>
&lt;li>The company is not &amp;ldquo;our baby&amp;rdquo;. It is our product. We&amp;rsquo;ll make it great, but we won&amp;rsquo;t take a bullet for it.&lt;/li>
&lt;li>&lt;strong>When executives talk about how their company is really a big ol&amp;rsquo; family, beware. Their motive is rather more likely to be a unidirectional sacrifice: yours.&lt;/strong>&lt;/li>
&lt;li>The best companies aren&amp;rsquo;t families. They&amp;rsquo;re supporters of families.&lt;/li>
&lt;/ul>
&lt;h2 id="theyll-do-as-you--do">They&amp;rsquo;ll Do as You Do&lt;/h2>
&lt;ul>
&lt;li>A leader who sets an example of self-sacrifice can&amp;rsquo;t help but ask self-sacrifice of others.&lt;/li>
&lt;li>Workaholism is a contagious disease. Disseminate calm instead.&lt;/li>
&lt;/ul>
&lt;h2 id="the-trust-battery">The Trust Battery&lt;/h2>
&lt;ul>
&lt;li>It is charged at 50% when people are first hired. Every time you work with someone at the company, the trust between the two of you is either charged or discharged, based on things like whether you deliver on what you promise.&lt;/li>
&lt;li>It is a summary of all interactions to date.&lt;/li>
&lt;li>&lt;strong>Having good relationships at work takes, err, work.&lt;/strong>&lt;/li>
&lt;li>The worst thing you can do is pretend that interpersonal feelings don&amp;rsquo;t matter.&lt;/li>
&lt;/ul>
&lt;h2 id="dont-be-the-last-to-know">Don&amp;rsquo;t Be the Last to Know&lt;/h2>
&lt;ul>
&lt;li>If the boss really wants to know what&amp;rsquo;s going on: They have to ask. Not vague, self-congratulatory BS questions like &amp;ldquo;What can we do even better?&amp;rdquo;, but hard ones like &amp;ldquo;What&amp;rsquo;s something nobody dares to talk about?&amp;rdquo; or &amp;ldquo;Are you afraid of anything at work?&amp;rdquo; or &amp;ldquo;It there anything you worked on recently you wish you could do over?&amp;rdquo;&lt;/li>
&lt;li>The higher you go in an organization, the less you&amp;rsquo;ll know what it&amp;rsquo;s &lt;em>really&lt;/em> like. The CEO is usually the last to know. &lt;strong>With great power comes great ignorance&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;h2 id="the-owners-word-weights-a-ton">The Owner&amp;rsquo;s Word Weights a Ton&lt;/h2>
&lt;ul>
&lt;li>There is no such thing as a casual suggestion when it comes from the owner of the business.&lt;/li>
&lt;li>It takes great restraint as the leader of an organization not to keep lobbying ideas at everyone else.&lt;/li>
&lt;li>Evading responsibility with a &amp;ldquo;But it&amp;rsquo;s just a suggestion&amp;rdquo; isn&amp;rsquo;t going to calm the waters.&lt;/li>
&lt;/ul>
&lt;h2 id="low-hanging-fruit-can-still-be-out-of-reach">Low-Hanging Fruit Can Still Be Out of Reach&lt;/h2>
&lt;ul>
&lt;li>the further away you&amp;rsquo;re from the fruit, the lower it looks&lt;/li>
&lt;li>&lt;strong>Declaring that an unfamiliar task will yield low-hanging fruit is almost always an admission that you have little insight.&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="dont-cheat-sleep">Don&amp;rsquo;t Cheat Sleep&lt;/h2>
&lt;ul>
&lt;li>Continued sleep deprivation batters your IQ and saps your creativity.&lt;/li>
&lt;li>Get a good eight hours night.&lt;/li>
&lt;li>Your brain is still active at night. It works through matters you can&amp;rsquo;t address during the day.&lt;/li>
&lt;/ul>
&lt;h2 id="out-of-whack">Out of Whack&lt;/h2>
&lt;h2 id="hire-the-work-not-the-resume">Hire the Work, Not the Resume&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Whenever someone joins (or leaves) a team, the old team is gone.&lt;/strong>&lt;/li>
&lt;li>You can&amp;rsquo;t land a job at Basecamp based on your resume. &lt;strong>You&amp;rsquo;ve to be good with people. Someone the rest of the team wants to work with, not just someone they&amp;rsquo;d tolerate.&lt;/strong>&lt;/li>
&lt;li>We&amp;rsquo;re looking for candidates that are interesting and different from the people we already have.&lt;/li>
&lt;li>Hire finalists for a week, pay them for their time and ask them to do a sample project for us.&lt;/li>
&lt;li>Avoid hiring an imaginary person.&lt;/li>
&lt;/ul>
&lt;h2 id="nobody-hits-the-ground-running">Nobody Hits the Ground Running&lt;/h2>
&lt;ul>
&lt;li>unless you hire someone straight out of an identical role at an identical company, they&amp;rsquo;re highly unlikely to be instantly up to speed and able to deliver anyway.&lt;/li>
&lt;li>The quickest way to disappointment is to set unrealistic expectations.&lt;/li>
&lt;/ul>
&lt;h2 id="ignore-the-talent-war">Ignore the Talent War&lt;/h2>
&lt;ul>
&lt;li>Talent isn&amp;rsquo;t worth fighting over. It&amp;rsquo;s not a fixed, scared resource. It rarely even transplants well.&lt;/li>
&lt;li>&lt;strong>If you do pay attention to having the best environment, you can grow your own beautiful orchids with patience. No need to steal them from your neighbor!&lt;/strong>&lt;/li>
&lt;li>Look at people&amp;rsquo;s work, not at their diploma.&lt;/li>
&lt;li>Nurturing untapped potential is fare more exhilarating than finding someone who&amp;rsquo;s already at their peak.&lt;/li>
&lt;/ul>
&lt;h2 id="dont-negotiate-salaries">Don&amp;rsquo;t Negotiate Salaries&lt;/h2>
&lt;ul>
&lt;li>most people just don&amp;rsquo;t enjoy haggling&lt;/li>
&lt;li>Everyone in the same role at the same level is paid the same. Equal work, equal pay.&lt;/li>
&lt;li>Once every year we review market rates and issues raises automatically. Our target is to pay everyone at the company the top 10% of the market regardless of their role.&lt;/li>
&lt;li>We don&amp;rsquo;t pay traditional bonuses.&lt;/li>
&lt;li>There are no stock options.&lt;/li>
&lt;li>We&amp;rsquo;ve vowed to distribute 5% of the proceeds to all current employees if we ever sell the company. It&amp;rsquo;s a pleasant surprise, it&amp;rsquo;s not compensation.&lt;/li>
&lt;li>If total profits grow year over year, we&amp;rsquo;ll distribute 25% of that growth to employees that year. This isn&amp;rsquo;t tied to role, it&amp;rsquo;s not about individual performance.&lt;/li>
&lt;li>Some amount of turnover is a good thing, but salary shouldn&amp;rsquo;t be the main driver for most people.&lt;/li>
&lt;li>Hiring and training people is not only expensive, but draining.&lt;/li>
&lt;/ul>
&lt;h2 id="benefits-who">Benefits Who?&lt;/h2>
&lt;ul>
&lt;li>fancy benefits blur the lines between work and play to the point it&amp;rsquo;s mostly just work.&lt;/li>
&lt;li>Dinners, lunches, game rooms, late nights - these mainly exist at companies that work 60_ hours a week, not 40. Sounds more like a bribe, than benefits.&lt;/li>
&lt;li>Benefits benefit the employees, not the company:
&lt;ul>
&lt;li>fully paid vacations every year for everyone who&amp;rsquo;s been with the company for more than a year&lt;/li>
&lt;li>three-day weekends all summer&lt;/li>
&lt;li>30-day-paid sabbaticals every three years&lt;/li>
&lt;li>$1,000 per year continuing-education stipend.&lt;/li>
&lt;li>$2,000 per year charity match&lt;/li>
&lt;li>$100 monthly fitness allowance&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Not a single benefit aimed at trapping people at the office.&lt;/li>
&lt;/ul>
&lt;h2 id="library-rules">Library Rules&lt;/h2>
&lt;ul>
&lt;li>When sales or service people, who often need to be loud and jovial on the phone, have to share accommodations with people who need long stretches of quiet, you&amp;rsquo;re not only destroying productivity, you&amp;rsquo;re forming resentment.&lt;/li>
&lt;li>Distractions spread like viruses. Before you know it, everyone&amp;rsquo;s infected.&lt;/li>
&lt;li>&lt;strong>Rather than thinking of it as an office, we think of it as a library.&lt;/strong>&lt;/li>
&lt;li>We&amp;rsquo;ve designated a handful of small rooms in the center of the office where people can go if they need to work on something together or make a private call.&lt;/li>
&lt;/ul>
&lt;h2 id="no-fakecations">No Fakecations&lt;/h2>
&lt;ul>
&lt;li>The whole purpose of a vacation is to get away. Work should not be on your mind.&lt;/li>
&lt;li>Fakecations put employees on a leash - liable to be yanked back and pulled into work at any moment.&lt;/li>
&lt;li>Unlimited vacation is a stressful benefit because it is not truly unlimited.&lt;/li>
&lt;li>Ambiguity breeds anxiety.&lt;/li>
&lt;li>The world will still be standing when you return.&lt;/li>
&lt;/ul>
&lt;h2 id="calm-goodbyes">Calm Goodbyes&lt;/h2>
&lt;ul>
&lt;li>A dismissal opens a vacuum, and unless you fill that vacuum with facts, it&amp;rsquo;ll quickly fill with rumors, conjecture, anxiety and fear.&lt;/li>
&lt;li>Whenever someone leaves Basecamp, an immediate goodbye announcement is sent out companywide. It is written be either the person leaving or their manager.&lt;/li>
&lt;/ul>
&lt;h1 id="dissect-your-process">Dissect Your Process&lt;/h1>
&lt;h2 id="the-wrong-time-for-real-time">The Wrong Time for Real-Time&lt;/h2>
&lt;ul>
&lt;li>Following group chat at work is like being in an all-day meeting with random participants and no agenda. It&amp;rsquo;s completely exhausting.&lt;/li>
&lt;li>When it comes to chat, we have two primary rules of thumb: &amp;ldquo;Real-time sometimes, asynchronous most of the time&amp;rdquo; and &amp;ldquo;If it&amp;rsquo;s important, slow down.&amp;rdquo;&lt;/li>
&lt;li>Chat is a great as a small slice but not the whole pie of communication.&lt;/li>
&lt;/ul>
&lt;h2 id="dreadlines">Dreadlines&lt;/h2>
&lt;ul>
&lt;li>Without a fixed, believable deadline, you can&amp;rsquo;t work calmly.&lt;/li>
&lt;li>Few things are so demoralizing as working on projects with no end in sight.&lt;/li>
&lt;li>&lt;strong>You can&amp;rsquo;t fix a deadline and then add more work to it.&lt;/strong> Our projects can only get smaller over time, not larger.&lt;/li>
&lt;li>Not the CEO, not the CTO. The team that&amp;rsquo;s doing the work has control over the work. They wield the &amp;ldquo;scope hammer&amp;rdquo;.&lt;/li>
&lt;li>Our deadlines are based on budgets, not estimates. &lt;strong>Humans suck at estimating. But it turns out that people are quite good at setting and spending budgets.&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="dont-be-a-knee-jerk">Don&amp;rsquo;t be a Knee-Jerk&lt;/h2>
&lt;ul>
&lt;li>When we present work, it&amp;rsquo;s almost always written up first. A complete idea in the form of a carefully composed multipage document. Illustrated, whenever possible.&lt;/li>
&lt;li>We don&amp;rsquo;t want reactions. We don&amp;rsquo;t want first impressions. We don&amp;rsquo;t want knee-jerks. We want considered feedback. Read over it. Twice. Three times even. Sleep on it. Take your time and gather and prsent thoughts.&lt;/li>
&lt;li>&lt;strong>Don&amp;rsquo;t meet, write. Don&amp;rsquo;t react, consider.&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="watch-out-for-12-day-weeks">Watch Out for 12-Day Weeks&lt;/h2>
&lt;ul>
&lt;li>Ship software on Monday, not Friday.&lt;/li>
&lt;/ul>
&lt;h2 id="the-new-normal">The New Normal&lt;/h2>
&lt;ul>
&lt;li>Normal comes on quick. First it starts an outlier. Some behaviour you don&amp;rsquo;t love, but tolerate. Then someone else follows suit.&lt;/li>
&lt;/ul>
&lt;h2 id="bad-habits-beat-good-intentions">Bad Habits Beat Good Intentions&lt;/h2>
&lt;ul>
&lt;li>What we do repeatedly hardens into habits. The longer you carry on, the tougher is to change.&lt;/li>
&lt;li>Later is where excuse live. Make change now.&lt;/li>
&lt;/ul>
&lt;h2 id="independences">Independences&lt;/h2>
&lt;ul>
&lt;li>We want our teams to be able to glide by one another independently rather than tripped up in lockstep. Things should fit together rather than stick together.&lt;/li>
&lt;li>Ship things when they&amp;rsquo;re ready rather than when they&amp;rsquo;re coordinated. If it&amp;rsquo;s ready for the web, ship it. iOS will catch up when they&amp;rsquo;re ready. Customers get the value when it&amp;rsquo;s ready wherever, not when it&amp;rsquo;s ready everywhere.&lt;/li>
&lt;li>Don&amp;rsquo;t tie more knots, cut more ties. The fewer bonds, the better.&lt;/li>
&lt;/ul>
&lt;h2 id="commitment-not-consensus">Commitment, Not Consensus&lt;/h2>
&lt;ul>
&lt;li>When you get a bunch of people in a room under the assumption that consensus is the only way out, you&amp;rsquo;re in for a war of attrition. Whoever can keep arguing the longest, stands the best chance.&lt;/li>
&lt;li>Good decisions are always going to be the product of consultation, evidence, arguments and debate. But the only sustainable method in business is to have them made by individuals.&lt;/li>
&lt;li>I disagree, but let&amp;rsquo;s commit.&lt;/li>
&lt;li>Allow everyone to be heard and then turn the decision over to one person to make the final call. It&amp;rsquo;s their job to listen, consider, contemplate and decide.&lt;/li>
&lt;li>The final decision should be explained clearly to everyone involved. &lt;strong>It&amp;rsquo;s not just decide and go, it&amp;rsquo;s decide, explain and go.&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="compromise-on-quality">Compromise on Quality&lt;/h2>
&lt;ul>
&lt;li>Attempting to be indiscriminately great at everything is a foolish waste of energy.&lt;/li>
&lt;li>Put efforts into separating what really matters from what soft of matters from what doesn&amp;rsquo;t matter at all.&lt;/li>
&lt;/ul>
&lt;h2 id="narrow-as-you-go">Narrow as You Go&lt;/h2>
&lt;ul>
&lt;li>Always keeping the door open to radical changes only invites chaos and second-guessing. Confidently close that door.&lt;/li>
&lt;li>Answer to &lt;strong>new ideas that arrive too late: You&amp;rsquo;ll just have to wait.&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="why-not-nothing">Why Not Nothing?&lt;/h2>
&lt;ul>
&lt;li>&amp;ldquo;Nothing&amp;rdquo; should be always on the table.&lt;/li>
&lt;li>It&amp;rsquo;s easier to mess up something that&amp;rsquo;s working well than it is go genuinely improve it.&lt;/li>
&lt;/ul>
&lt;h2 id="its-enough">It&amp;rsquo;s Enough&lt;/h2>
&lt;ul>
&lt;li>If it&amp;rsquo;s never enough, then it&amp;rsquo;ll be crazy at work.&lt;/li>
&lt;li>Spend more time thinking, helping and writing - and less time rushing.&lt;/li>
&lt;/ul>
&lt;h2 id="worst-practices">Worst Practices&lt;/h2>
&lt;ul>
&lt;li>What counts as the best practice for a company of 10,000 is very rarely so for a company of 10.&lt;/li>
&lt;li>Many best practices are purely folklore.&lt;/li>
&lt;li>Best practices imply that there&amp;rsquo;s a single answer to whatever question you&amp;rsquo;re facing. It implies that you really don&amp;rsquo;t have a choice in the matter.&lt;/li>
&lt;li>Best practices are like training wheels.&lt;/li>
&lt;/ul>
&lt;h2 id="whatever-it-doesnt-take">Whatever It Doesn&amp;rsquo;t Take&lt;/h2>
&lt;ul>
&lt;li>Reasonable expectations are out the window with whatever it takes. So you know you&amp;rsquo;re going to grossly underestimate the difficulty and complexity required to make it happen.&lt;/li>
&lt;li>s/whatever does it take?/what will it take?/&lt;/li>
&lt;/ul>
&lt;h2 id="have-less-to-do">Have Less to Do&lt;/h2>
&lt;ul>
&lt;li>it&amp;rsquo;s not time management, &lt;strong>it&amp;rsquo;s obligation elimination&lt;/strong>.&lt;/li>
&lt;li>Peter Drucker: &amp;ldquo;There is nothing so useless as doing efficiently that which should not be done at all.&amp;rdquo;&lt;/li>
&lt;li>Become ruthless about eliminating either work that doesn&amp;rsquo;t need to be done or work we don&amp;rsquo;t want to do.&lt;/li>
&lt;/ul>
&lt;h2 id="threes-company">Three&amp;rsquo;s Company&lt;/h2>
&lt;ul>
&lt;li>Two programmers and one designer. If not three, it&amp;rsquo;s one or two rather than four or five.&lt;/li>
&lt;li>Three is a wedge. Three has a sharp point. It&amp;rsquo;s an odd number and there are no ties. It&amp;rsquo;s powerful enough to make a dent, but weak enough to to break what isn&amp;rsquo;t broken.&lt;/li>
&lt;li>Just like work expands to fill the time available, work expands to fill the team available.&lt;/li>
&lt;li>Three keeps you honest. It tampers your ambition in all the right way.&lt;/li>
&lt;li>Three people can talk directly with one another without introducing hearsay.&lt;/li>
&lt;/ul>
&lt;h2 id="stick-with-it">Stick With It&lt;/h2>
&lt;ul>
&lt;li>We make every idea wait a while. Generally a few weeks, at last. That&amp;rsquo;s just enough time either to forget about it completely or to realize you can&amp;rsquo;t stop thinking about it.&lt;/li>
&lt;/ul>
&lt;h2 id="know-no">Know No&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>No is easier to do, yes is easier to say.&lt;/strong>&lt;/li>
&lt;li>No is no to one thing, yes is no to a thousand things.&lt;/li>
&lt;li>No is a precision instrument, yes is a blunt object.&lt;/li>
&lt;li>When you say no to one thing, it&amp;rsquo;s a choice that breeds choices. Tomorrow you can be as open to new opportunities as you were today.&lt;/li>
&lt;li>When you say yes now, it&amp;rsquo;s harder to say no later.&lt;/li>
&lt;li>No is calm but hard, yes is easy but a flurry.&lt;/li>
&lt;/ul>
&lt;h1 id="mind-your-business">Mind Your Business&lt;/h1>
&lt;h2 id="risk-without-putting-yourself-at-risk">Risk Without Putting Yourself at Risk&lt;/h2>
&lt;ul>
&lt;li>We&amp;rsquo;ll take a risk, but we won&amp;rsquo;t put the company at risk.&lt;/li>
&lt;li>The smart bet is one where you get to play again if it doesn&amp;rsquo;t come up your way.&lt;/li>
&lt;/ul>
&lt;h2 id="seasons-greetings">Season&amp;rsquo;s Greetings&lt;/h2>
&lt;ul>
&lt;li>We celebrate the summer months by cutting out a workday every week.&lt;/li>
&lt;li>Winter is when we buckle down and take on larger, more challenging projects.&lt;/li>
&lt;li>Celebrate the seasons, find ways to melt the monotony of work.&lt;/li>
&lt;/ul>
&lt;h2 id="calms-in-the-black">Calm&amp;rsquo;s in the Black&lt;/h2>
&lt;ul>
&lt;li>Crazy&amp;rsquo;s in the red (numbers).&lt;/li>
&lt;li>Profit means time to think, space to explore. It means being in control of your own destiny and schedule.&lt;/li>
&lt;/ul>
&lt;h2 id="priced-to-lose">Priced to Lose&lt;/h2>
&lt;ul>
&lt;li>The worst customer is the one you can&amp;rsquo;t afford to lose.&lt;/li>
&lt;li>The problem with per-seat pricing is that it makes your biggest customers your best customers.&lt;/li>
&lt;li>Becoming a calm company is all about making decisions who you are, who you want to serve, and who you want to say no to.&lt;/li>
&lt;/ul>
&lt;h2 id="launch-and-learn">Launch and Learn&lt;/h2>
&lt;ul>
&lt;li>If you want to know the truth about what you&amp;rsquo;ve built, you have to ship it.&lt;/li>
&lt;li>Simulated situations give you simulated answers. Shipping real products gives you real answers.&lt;/li>
&lt;li>We don&amp;rsquo;t show any customers anything until every customer can see it. We don&amp;rsquo;t beta-test with customers. We don&amp;rsquo;t ask people what they&amp;rsquo;d pay for something.&lt;/li>
&lt;/ul>
&lt;h2 id="promise-not-to-promise">Promise Not to Promise&lt;/h2>
&lt;ul>
&lt;li>We&amp;rsquo;ve never committed to a product road map.&lt;/li>
&lt;li>Promises lead to rushing, dropping, scrambling and a tinge of regret at the earlier promise that was a bit too easy to make.&lt;/li>
&lt;li>Promises pile up like dept, and they accrue interest, too. The longer you wait to fulfill them, the more they cost to pay off and the worse the regret.&lt;/li>
&lt;li>&lt;strong>Promises are easy and cheap to make, actual work is hard and expensive.&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="copycats">Copycats&lt;/h2>
&lt;ul>
&lt;li>Getting angry only hurts you.&lt;/li>
&lt;li>Do you think your customers are going to care? They just want a good product at a great price.&lt;/li>
&lt;/ul>
&lt;h2 id="change-control">Change Control&lt;/h2>
&lt;ul>
&lt;li>People have no problem wit change they asked for. What people don&amp;rsquo;t like is forced change.&lt;/li>
&lt;li>Sell the new customers the new thing and let old customers keep whatever they already have.&lt;/li>
&lt;li>Be proud of your heritage.&lt;/li>
&lt;/ul>
&lt;h2 id="startups-are-easy-stayups-are-hard">Startups are Easy, Stayups Are Hard&lt;/h2>
&lt;ul>
&lt;li>The easiest day is day one.&lt;/li>
&lt;/ul>
&lt;h2 id="no-big-deal-or-the-end-of-the-world">No Big Deal or the End of the World?&lt;/h2>
&lt;ul>
&lt;li>People don&amp;rsquo;t like to have their grievances downplayed or dismissed. When that happens, even the smallest irritation can turn into an obsessive crusade.&lt;/li>
&lt;li>&lt;strong>When you deal with people who have trouble, you can either choose to take the token that says &amp;ldquo;It&amp;rsquo;s no big deal&amp;rdquo; or the token that says &amp;ldquo;It&amp;rsquo;s the end of the world.&amp;rdquo; Whichever token you pick, they&amp;rsquo;ll take the other.&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Everyone wants to be heard and respected. It doesn&amp;rsquo;t matter all that much whether you ultimately think you&amp;rsquo;re right and they&amp;rsquo;re wrong. Arguing with heated feelings will just increase the burn.&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="the-good-old-days">The Good Old Days&lt;/h2>
&lt;ul>
&lt;li>If the good days were so good, we&amp;rsquo;d do best to simply settle there. So we&amp;rsquo;ve decided to stay as small as we can for as long as we can.&lt;/li>
&lt;/ul>
&lt;h1 id="last">Last&lt;/h1>
&lt;h2 id="choose-calm">Choose Calm&lt;/h2>
&lt;ul>
&lt;li>If you don&amp;rsquo;t have the power to make things change at the company level, find your local level. You always have the choice to change yourself and your expectations. Change the way you interact with people. Change the way you communicate. Start protecting your own time.&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>Do not let anyone overpay you</title><link>http://uzak.github.io/post/2021-04-22-do_not_let_anyone_overpay_you/</link><pubDate>Thu, 22 Apr 2021 00:00:00 +0000</pubDate><guid>http://uzak.github.io/post/2021-04-22-do_not_let_anyone_overpay_you/</guid><description>&lt;p>&lt;a href="https://m.signalvnoise.com/dont-let-anyone-overpay-you/">source&lt;/a>&lt;/p>
&lt;ul>
&lt;li>The moment one customer pays you a lot more than any other customer, you&amp;rsquo;re no longer a product but a consulting company working for the big payers. You&amp;rsquo;ll do what they say.&lt;/li>
&lt;li>Self-sufficient.&lt;/li>
&lt;li>We would never allow a customer to pay more than top-tier price. If you&amp;rsquo;re a bit company with special demands, we don&amp;rsquo;t want your money.&lt;/li>
&lt;li>We wanted to build a self-service software company. Not need an army of key account managers keeping the whales happy.&lt;/li>
&lt;li>Strength of numbers. Not large numbers of dollars. But large numbers of customers. Diverse customer base.&lt;/li>
&lt;li>Said no to people, companies, &amp;hellip; we admire.&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>Clean Code</title><link>http://uzak.github.io/post/2021-04-02-clean_code/</link><pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate><guid>http://uzak.github.io/post/2021-04-02-clean_code/</guid><description>&lt;p>NOTE: TOC and these notes do not strictly correspond to the order used in the book itself.&lt;/p>
&lt;h2 id="clean-code">Clean Code&lt;/h2>
&lt;ul>
&lt;li>Code is really the language in which we ultimately express the requirements.&lt;/li>
&lt;li>It is unprofessional for programmers to bend to the will of managers who don&amp;rsquo;t understand the risks of making messes.&lt;/li>
&lt;li>We are authors. Ratio of time spent reading vs. writing is well over 10:1. Making it easy to read actually makes it easier to write.&lt;/li>
&lt;li>The Boy Scout rule: &lt;em>Leave the campground cleaner than you found it.&lt;/em> Isn&amp;rsquo;t continuous improvement an intrinsic part of professionalism?&lt;/li>
&lt;/ul>
&lt;h3 id="what-is-clean-code-answers-from-experts">What Is Clean Code? (Answers from experts)&lt;/h3>
&lt;ul>
&lt;li>Bad code temps the mess to grow! When others change bad code; they tend to make it worse.&lt;/li>
&lt;li>Clean code is focused. Each function, each class, each module exposes a single-minded attitude that remains entirely undistracted, and unpolluted, by the surrounding details.&lt;/li>
&lt;li>Clean code can be read, and enhanced by a developer other than its original author. It has unit and acceptance tests. It has meaningful names. It provides one way rather than many ways for doing one thing. It has minimal dependencies, which are explicitly defined, and provides a clear and minimal API. Code should be literate since depending on the language, not all necessary information can be expressed clearly in code alone.&lt;/li>
&lt;li>Runs all the tests; Contains no duplications; Expresses all the design ideas that are in the system; Minimizes the number of entities such as classes, methods, functions, and the like.&lt;/li>
&lt;/ul>
&lt;h3 id="prequel-and-principles">Prequel and Principles&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Single Responsibility Principle&lt;/strong>: every module, class or a function should have responsibility over a single part of that program&amp;rsquo;s functionality and it should encapsulate that part.&lt;/li>
&lt;li>&lt;strong>Open Closed Principle&lt;/strong>: software entities (modules, classes, functions) should be open for extension but closed for modification.&lt;/li>
&lt;li>&lt;strong>Dependency Inversion Principle&lt;/strong>: Classes should depend on abstractions, not on concrete details.&lt;/li>
&lt;/ul>
&lt;h2 id="meaningful-names">Meaningful Names&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Use Intention-Revealing Names. Choosing good names takes time but saves more time than it takes.&lt;/p></description></item><item><title>Prusa Link Architecture</title><link>http://uzak.github.io/post/2021-03-01-prusa_link_architecture/</link><pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate><guid>http://uzak.github.io/post/2021-03-01-prusa_link_architecture/</guid><description>&lt;h1 id="main-driver">Main Driver&lt;/h1>
&lt;ul>
&lt;li>parse CLI args&lt;/li>
&lt;li>setup logging&lt;/li>
&lt;li>instantiate main class and run&lt;/li>
&lt;/ul>
&lt;h1 id="logging">logging&lt;/h1>
&lt;pre tabindex="0">&lt;code>log = logging.getLogger(__name__)

# -l on CLI for setting debug levels
for module, level in log_levels:
 logging.getLogger(module).setLevel(level)
&lt;/code>&lt;/pre>&lt;h1 id="config">config&lt;/h1>
&lt;p>Uses &lt;code>extendparser&lt;/code> in &lt;code>config.py&lt;/code>&lt;/p>
&lt;h1 id="mvc">MVC&lt;/h1>
&lt;p>&lt;code>MainClass.__init__(config)&lt;/code> as Controller:&lt;/p>
&lt;ul>
&lt;li>instantiate Model&lt;/li>
&lt;li>instantiate components in proper order&lt;/li>
&lt;li>bind signals&lt;/li>
&lt;li>start threads&lt;/li>
&lt;/ul>
&lt;p>There is &lt;code>MainClass.stop()&lt;/code> for controlled shutdown.&lt;/p>
&lt;h2 id="signals">signals&lt;/h2>
&lt;p>Uses &lt;code>blinker&lt;/code> module. Usage: &lt;code>signal.connect(handler)&lt;/code>.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>Kubernetes</title><link>http://uzak.github.io/post/2021-02-22-kubernetes/</link><pubDate>Mon, 22 Feb 2021 00:00:00 +0000</pubDate><guid>http://uzak.github.io/post/2021-02-22-kubernetes/</guid><description>&lt;p>&lt;a href="https://www.golinuxcloud.com/kubernetes-tutorial/">source&lt;/a>&lt;/p>
&lt;h2 id="install-and-deploy">Install and Deploy&lt;/h2>
&lt;ul>
&lt;li>install kubectl&lt;/li>
&lt;li>install minikube&lt;/li>
&lt;/ul>
&lt;p>Commands:&lt;/p>
&lt;pre>&lt;code>minikube start 
minikube status

kubectl get node
kubectl get pods

kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.4
kubectl expose deployment hello-minikube --type=NodePort --port=8080
minikube service hello-minikube --url
curl http://192.168.49.2:31223
kubectl delete deployments.apps hello-minikube 

minikube pause
minikube unpause
minikube stop
&lt;/code>&lt;/pre>
&lt;h2 id="namespaces">Namespaces&lt;/h2>
&lt;ul>
&lt;li>for organization and resource separation&lt;/li>
&lt;li>&lt;code>kubectl --namespace=mystuff&lt;/code> or &lt;code>kubectl -n=mystuff&lt;/code>&lt;/li>
&lt;li>&lt;code>kubectl --all-namespaces&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Default namespaces for new clusters:&lt;/p>
&lt;pre>&lt;code>$ kubectl get ns 
NAME STATUS AGE
default Active 13m # k8s resources are crated here by default
kube-node-lease Active 13m # storage for node lease information
kube-public Active 13m # world-readable
kube-system Active 13m # infrastructure pods
&lt;/code>&lt;/pre>
&lt;p>Commands:&lt;/p></description></item><item><title>Rework</title><link>http://uzak.github.io/post/2020-07-05-rework/</link><pubDate>Sun, 05 Jul 2020 00:00:00 +0000</pubDate><guid>http://uzak.github.io/post/2020-07-05-rework/</guid><description>&lt;p>by &lt;em>Jason Fried&lt;/em>.&lt;/p>
&lt;h1 id="takedown">Takedown&lt;/h1>
&lt;h2 id="ignore-the-real-world">Ignore the real world&lt;/h2>
&lt;p>The real world isn&amp;rsquo;t a place, it&amp;rsquo;s an excuse. It&amp;rsquo;s a justification for not trying. It has nothing to do with you.&lt;/p>
&lt;h2 id="learning-from-mistakes-is-overrated">Learning from mistakes is overrated&lt;/h2>
&lt;p>Failure is not a prerequisite for success.&lt;/p>
&lt;p>People who failed have the same amount of success as people who have never tried at all.&lt;/p>
&lt;p>Long term business planing is fantasy.&lt;/p>
&lt;p>&lt;strong>Start referring to any of your plans as guesses.&lt;/strong>&lt;/p></description></item><item><title>The Pragmatic Programmer</title><link>http://uzak.github.io/post/2020-03-16-the_pragmatic_programmer/</link><pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate><guid>http://uzak.github.io/post/2020-03-16-the_pragmatic_programmer/</guid><description>&lt;p>&lt;em>From Journeyman to Master&lt;/em>&lt;/p>
&lt;h1 id="preface">Preface&lt;/h1>
&lt;ul>
&lt;li>core process: taking a requirement and producing working, maintainable code that delights the user.&lt;/li>
&lt;li>QWAN - quality without a name. Don&amp;rsquo;t preach, just tell/do what works.&lt;/li>
&lt;li>pragmatic -&amp;gt; lat. (pragmaticus) -&amp;gt; greek &amp;ldquo;to do&amp;rdquo;.&lt;/li>
&lt;li>There are no easy answers There is no such thing as best solution, tool language or OS.&lt;/li>
&lt;li>You shouldn&amp;rsquo;t be weeded to any particular technology but have broad enough background and experience base to allow to choose good solution in any particular situation.&lt;/li>
&lt;/ul>
&lt;h2 id="what-makes-a-pragmatic-programmer">What Makes a Pragmatic Programmer?&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Early Adopter &amp;amp; Fast Adapter&lt;/strong> - instinct for technologies and techniques, love to try things out, grasp it quickly and integrate with the rest of the knowledge. Your confidence is born out of experience.&lt;/li>
&lt;li>&lt;strong>Inquisitive&lt;/strong> - you tend to ask questions (TODO). You are a pack rat for little facts.&lt;/li>
&lt;li>&lt;strong>Realistic&lt;/strong> - try to understand the underlying nature of each problem you face.&lt;/li>
&lt;li>&lt;strong>Jack of all trades&lt;/strong> - always able to move on to new areas and new challenges.&lt;/li>
&lt;/ul>
&lt;p>TIP 1: care about your craft&lt;br>
TIP 2: Think! About your work. Think what you are doing while you&amp;rsquo;re doing it. Never run on autopilot. Constantly be thinking, critiquing your work in real time.&lt;/p></description></item><item><title>Testing Python</title><link>http://uzak.github.io/post/2019-12-13-python__testing/</link><pubDate>Fri, 13 Dec 2019 00:00:00 +0000</pubDate><guid>http://uzak.github.io/post/2019-12-13-python__testing/</guid><description>&lt;h1 id="chapter-1">Chapter 1&lt;/h1>
&lt;ul>
&lt;li>Writing code without tests in general is going to lead to problems down the line.&lt;/li>
&lt;li>Choreographing&lt;/li>
&lt;li>One of the worst traps a developer can fall into is writing a bunch of code and then going back and testing it all at the end.&lt;/li>
&lt;li>With the advent of social networks and the ever-increasing pressure of media attention, defects in your code could be costly to both you and your reputation or that of any company you may represent.&lt;/li>
&lt;li>The key advantage of writing tests, especially as part of the development process, is that testing gives you confidence in your code.&lt;/li>
&lt;/ul>
&lt;h1 id="chapter-2---writing-unittests">Chapter 2 - writing unittests&lt;/h1>
&lt;ul>
&lt;li>AN APPLICATION IS one of the great examples of the whole being greater than the sum of its parts.&lt;/li>
&lt;li>With a good test suite in place, refactoring is easy because you know when you change your code you haven’t broken any previous behavior.&lt;/li>
&lt;li>Before you write any code you give thought to the kind of tests you will be writing to check the methods will work as expected.&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>assertEqual()
with assertRaises(Exception)
assertAlmostEqual(1, 1.2, delta=0.5)
assertAlmostEqual(1, 1.00001, places=4)
assertDictContainsSubset(expected, actual, msg=None)
assertDictEqual(d1, d2, msg=None)
assertGreater(a, b, msg=None)
assertGreaterEqual(a, b, msg=None)
assertIn(member, container, msg=None)
assertNotNone(obj, msg=None)
assertLess(a, b, msg=None)
assertItemsEqual(a, b, msg=None)
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Unit tests should be placed under a &lt;code>test/unit&lt;/code> directory at the top level of your project folder.&lt;/li>
&lt;li>All unit test files should mirror the name of the file they are testing, with &lt;code>_test&lt;/code> as the suffix.&lt;/li>
&lt;li>Example:
{% highlight python %}
import unittest&lt;/li>
&lt;/ul>
&lt;p>from calculate import Calculate&lt;/p></description></item></channel></rss>