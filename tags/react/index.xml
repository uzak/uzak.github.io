<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>React on uzak.github.io</title><link>http://uzak.github.io/tags/react/</link><description>Recent content in React on uzak.github.io</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 06 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="http://uzak.github.io/tags/react/index.xml" rel="self" type="application/rss+xml"/><item><title>Scrimba: Learn React</title><link>http://uzak.github.io/post/2023-06-06-scrimba_learn_react/</link><pubDate>Tue, 06 Jun 2023 00:00:00 +0000</pubDate><guid>http://uzak.github.io/post/2023-06-06-scrimba_learn_react/</guid><description>&lt;p>&lt;a href="https://scrimba.com/learn/learnreact/">source&lt;/a>&lt;/p>
&lt;h2 id="intro">Intro&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>The easiest way to learn something is the hard way&lt;/strong>
&lt;ul>
&lt;li>learn by doing&lt;/li>
&lt;li>avoid &amp;ldquo;tutorial hell&amp;rdquo; by watching&lt;/li>
&lt;li>school: goal of learning is good grade. Here to be able to write react code.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Repetition is your best friend when it comes to learn something
&lt;ul>
&lt;li>Don&amp;rsquo;t binge the course&lt;/li>
&lt;li>Your brain needs rest. Take breaks often.&lt;/li>
&lt;li>Re-watch past lessons. Esp. when stuck.&lt;/li>
&lt;li>Ask community on discord, if in doubt.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>First thing to learn: how to think in react? React changes the game in terms of how you build the applications.&lt;/li>
&lt;/ul>
&lt;h2 id="build-a-react-info-site">Build a React info site&lt;/h2>
&lt;ul>
&lt;li>Why React?
&lt;ul>
&lt;li>Allows to write composable code.&lt;/li>
&lt;li>It&amp;rsquo;s declarative (as opposed to imperative). How it is done is not required.&lt;/li>
&lt;li>Actively maintained by skilled people&lt;/li>
&lt;li>Hireable skill&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="jsx">JSX&lt;/h3>
&lt;ul>
&lt;li>JSX - JavaScript XML. Flavour of javascript that looks like HTML.&lt;/li>
&lt;li>Allows to write HTML inside of JS.&lt;/li>
&lt;li>&lt;code>console.log(JSXObj)&lt;/code> shows the JS structure behind it.&lt;/li>
&lt;li>With JSX we need to make sure we&amp;rsquo;re returning only a single (parent) element.&lt;/li>
&lt;li>Dependencies required (&lt;code>package.json&lt;/code>):
&lt;ul>
&lt;li>&lt;code>react&lt;/code>&lt;/li>
&lt;li>&lt;code>react-dom&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#a6e22e">React&lt;/span> &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;react&amp;#34;&lt;/span> &lt;span style="color:#75715e">// make JSX syntax work; no longer required with react &amp;gt;= 17
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#a6e22e">ReactDOM&lt;/span> &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;react-dom/client&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">root&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">ReactDOM&lt;/span>.&lt;span style="color:#a6e22e">createRoot&lt;/span>(document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;root&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">render&lt;/span>(&lt;span style="color:#a6e22e">myComponent&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>A component is a function returning JSX UI. For components we use PascaCase for names.&lt;/li>
&lt;li>For styling use &lt;code>className&lt;/code> instead of &lt;code>class&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://vitejs.dev/">Vite&lt;/a> takes care of:
&lt;ul>
&lt;li>transpilation (Babel)&lt;/li>
&lt;li>Bundling (webpack, parcel, rollup, &lt;strong>esbuild&lt;/strong>)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Install nvm:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nvm install --lts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm create vite@latest &lt;span style="color:#75715e"># name: `vite-react`, select `react` twice&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd vite-react
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm install
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm run dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>teach the bundler will adapt to find actual images/css:
&lt;ul>
&lt;li>&lt;code>import logo from &amp;quot;./scrimba-log.png&amp;quot;&lt;/code>&lt;/li>
&lt;li>&lt;code>&amp;lt;img src={logo}/&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>import &amp;quot;./App.css&amp;quot;&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://fonts.google.com/">Google Fonts&lt;/a>. Put above the CSS link:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">link&lt;/span> &lt;span style="color:#a6e22e">rel&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;preconnect&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://fonts.googleapis.com&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">link&lt;/span> &lt;span style="color:#a6e22e">rel&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;preconnect&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://fonts.gstatic.com&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">crossorigin&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">link&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&amp;amp;display=swap&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">rel&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;stylesheet&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>CSS for navbar:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">*&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">box-sizing&lt;/span>: &lt;span style="color:#66d9ef">border-box&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">body&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">margin&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">font-family&lt;/span>: Inter, &lt;span style="color:#66d9ef">sans-serif&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">nav&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">display&lt;/span>: &lt;span style="color:#66d9ef">flex&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">align-items&lt;/span>: &lt;span style="color:#66d9ef">center&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">90&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">30&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">25&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">nav--logo_text&lt;/span>&lt;span style="color:#f92672">,&lt;/span> .&lt;span style="color:#a6e22e">nav--title&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">margin&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">nav--logo_text&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">margin-right&lt;/span>: &lt;span style="color:#66d9ef">auto&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">nav--icon&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">30&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">margin-right&lt;/span>: &lt;span style="color:#ae81ff">7&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">main--title&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">margin&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">letter-spacing&lt;/span>: &lt;span style="color:#ae81ff">-0.05&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">main--facts&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">margin-top&lt;/span>: &lt;span style="color:#ae81ff">46&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">max-width&lt;/span>: &lt;span style="color:#ae81ff">400&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">main--facts&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">li&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">line-height&lt;/span>: &lt;span style="color:#ae81ff">19&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> padding-block: &lt;span style="color:#ae81ff">10&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">main--facts&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">li&lt;/span>::&lt;span style="color:#a6e22e">marker&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">font-size&lt;/span>: &lt;span style="color:#ae81ff">1.4&lt;/span>&lt;span style="color:#66d9ef">rem&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">main&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">background-image&lt;/span>: url(&lt;span style="color:#e6db74">&amp;#34;./images/react-icon-large.png&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">background-repeat&lt;/span>: &lt;span style="color:#66d9ef">no-repeat&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">background-position&lt;/span>: &lt;span style="color:#66d9ef">right&lt;/span> &lt;span style="color:#ae81ff">75&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>npm run build&lt;/code> - tell webpack to build our files and get them ready for prod.&lt;/li>
&lt;/ul>
&lt;h2 id="build-a-airbnb-experience-clone">Build a AirBnB experience clone&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.figma.com/file/4YjrygFEXOcDp9AAnVFv7o/Airbnb-Experiences?node-id=0%3A1">Figma file&lt;/a>&lt;/li>
&lt;li>Topics:
&lt;ul>
&lt;li>Props&lt;/li>
&lt;li>Create components from an array&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>use &lt;code>{variable}&lt;/code> to interpolate variables in JSX. Anything within will be interpreted as regular JS code. Yet it is more readable to do the JS operations outside and only interpolate variables.&lt;/li>
&lt;li>ES6 and later support destructuring: &lt;code>const {img, name} = person&lt;/code>; within a function definition: &lt;code>function Contact({img, name}) {...}&lt;/code>&lt;/li>
&lt;li>Conditional rendering: &lt;code>{condition &amp;amp;&amp;amp; &amp;lt;h1&amp;gt;Setup: {props.setup}&amp;lt;/h1&amp;gt;}&lt;/code>&lt;/li>
&lt;li>Pass on other datatypes than strings: &lt;code>&amp;lt;Joke setup=&amp;quot;...&amp;quot; votes={2} comments=[{author: &amp;quot;...&amp;quot;, body: &amp;quot;...&amp;quot;, liked: true}]/&amp;gt;&lt;/code>&lt;/li>
&lt;li>Compute a html attribute &lt;code>&amp;lt;img src={`../images/${props.img}`}/&amp;gt;&lt;/code>&lt;/li>
&lt;li>Add a prop &lt;code>key&lt;/code> and set it to something unique anytime when using &lt;code>map()&lt;/code>.&lt;/li>
&lt;li>One of the reasons why React is popular is that it is just JS. No extra Markup language.&lt;/li>
&lt;li>Pass on all properties of an item using spread syntax: &lt;code>&amp;lt;Card key={item.id} {...item}/&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="build-a-meme-generator">Build a Meme generator&lt;/h2>
&lt;ul>
&lt;li>Static web-page: read only, no changes to the data.&lt;/li>
&lt;li>Dynamic Web Apps: read and write. User can change the data that drives the webpage. Highly interactive.&lt;/li>
&lt;li>Topics:
&lt;ul>
&lt;li>Event Listeners&lt;/li>
&lt;li>State&lt;/li>
&lt;li>Conditional Rendering&lt;/li>
&lt;li>Forms&lt;/li>
&lt;li>Side Effects&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://www.figma.com/file/MoLwFPHNHJVrzdFurxHzNV/Meme-Generator?type=design&amp;amp;node-id=2-2&amp;amp;t=corXruFlC0FYfl8J-0">Project figma&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://react.dev/learn/responding-to-events#adding-event-handler">Event handling&lt;/a>: within the functional Component, define a handler function and pass it to appropriate attribute, e.g.: &lt;code>onClick={clickHandler}&lt;/code>.&lt;/li>
&lt;li>Props: come &amp;ldquo;from above&amp;rdquo;. Just like a function receiving arguments a component is not allowed to modify the props. Props are immutable.&lt;/li>
&lt;li>State: values that are managed by the component. Like a variable declared within a function to help you accomplish something. Values that a component can maintain between render cycles. State is mutable.&lt;/li>
&lt;li>&lt;code>const [value, setter] = React.useState(DEFAULT_VALUE)&lt;/code> is one of the hooks in React.&lt;/li>
&lt;li>When we care about the previous state, we provide a callback function to the &lt;code>setter&lt;/code> function and it must return the new value. The one parameter to the callback is the &lt;code>prevValue&lt;/code>. This is so react can guarantee that we&amp;rsquo;ll receive the most recent value. E.g. &lt;code>setCount(prev =&amp;gt; prev + 1)&lt;/code>. We should never modify the state but return a new value.&lt;/li>
&lt;li>When we don&amp;rsquo;t care about the previous state we can use the &lt;code>setter&lt;/code> directly, e.g. &lt;code>setCount(42)&lt;/code>.&lt;/li>
&lt;li>Implicit return for object spread syntax: &lt;code>setContact(prevContact =&amp;gt; ({...prevContact, isFavorite: !prevContact.isFavorite}))&lt;/code>&lt;/li>
&lt;li>Whenever state changes React will render the component where the state exists and any child component that relies on the state to work correctly.&lt;/li>
&lt;li>Pass the handler function as callback to the child to have a change done in the parent.&lt;/li>
&lt;li>If you need to pass a data from one component to the other, put it to the parent of the both. An in-built React solution: &lt;a href="https://react.dev/learn/passing-data-deeply-with-context">context&lt;/a>. Other: &lt;a href="https://react-redux.js.org/">redux&lt;/a>.&lt;/li>
&lt;li>Rule of thumb: keep state as local as possible.&lt;/li>
&lt;li>&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/display">CSS display&lt;/a>: &lt;code>display: inline-block; margin-right: 5px&lt;/code> - have elements placed next to each other.&lt;/li>
&lt;li>React style: &lt;code>&amp;lt;div style={{backgroundColor: &amp;quot;red&amp;quot;}}&amp;gt;&lt;/code>. Style must be a JS object and keys need to be camelCased.&lt;/li>
&lt;li>&lt;a href="https://legacy.reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html">You Probably Don&amp;rsquo;t Need Derived State&lt;/a> - state being constructed from a prop.&lt;/li>
&lt;li>&lt;code>array.findIndex(obj =&amp;gt; obj.id === id)&lt;/code> to find the index of a matching obj in an array.&lt;/li>
&lt;li>&lt;a href="https://legacy.reactjs.org/docs/forms.html">Form&lt;/a> handling is one of React&amp;rsquo;s biggest weaknesses.
&lt;ul>
&lt;li>Controlled Component: state you&amp;rsquo;re maintaining in your component should be the single source of truth. Each form component should have a &lt;code>value&lt;/code> attribute, e.g. &lt;code>value={formData.firstName}&lt;/code>.&lt;/li>
&lt;li>React team changed &lt;code>&amp;lt;textarea&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/code> to be a self-enclosed element, e.g. &lt;code>&amp;lt;textarea value={formData.comment} onChange={handleChange} name=&amp;quot;comment&amp;quot; placeholder=&amp;quot;Comments&amp;quot; /&amp;gt;&lt;/code>&lt;/li>
&lt;li>Checkbox: &lt;code>&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;isFriendly&amp;quot; id=&amp;quot;isFriendly&amp;quot; checked={formData.isFriendly} onChange={handleChange}/&amp;gt;&lt;/code> and the label follows: &lt;code>&amp;lt;label htmlFor=&amp;quot;isFriendly&amp;quot;&amp;gt;Are you friendly?&amp;lt;label/&amp;gt;&lt;/code>. &lt;code>handleChange()&lt;/code> needs to take the value of &lt;code>checked&lt;/code> attribute if the type is &lt;code>checkbox&lt;/code>.&lt;/li>
&lt;li>Radiobox: &lt;code>checked&lt;/code> attribute needs to have a boolean value, therefore &lt;code>checked={formData.employment === &amp;quot;unemployed&amp;quot;}&lt;/code>&lt;/li>
&lt;li>Select &amp;amp; option: &lt;code>&amp;lt;select id=&amp;quot;favColor&amp;quot; value={formData.favColor} onChange={handleChange} name=&amp;quot;favColor&amp;quot;&amp;gt;&lt;/code>.&lt;/li>
&lt;li>Form: &lt;code>&amp;lt;form onSubmit={handleSubmit}&amp;gt;&lt;/code>. First thing we want to do in &lt;code>handleSubmit(event)&lt;/code> is to call &lt;code>event.preventDefault()&lt;/code> so the page is not refreshed. Then the form data can be submitted to an API.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// form handling fct
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">handleChange&lt;/span>(&lt;span style="color:#a6e22e">event&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> {&lt;span style="color:#a6e22e">name&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span>, &lt;span style="color:#a6e22e">checked&lt;/span>, &lt;span style="color:#a6e22e">type&lt;/span>} &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">target&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">setFormData&lt;/span>(&lt;span style="color:#a6e22e">prevFormData&lt;/span> =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...&lt;span style="color:#a6e22e">prevFormData&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a6e22e">name&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#e6db74">&amp;#34;checkbox&amp;#34;&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#a6e22e">checked&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;a href="https://swapi.dev/api/">Star Wars API&lt;/a>&lt;/li>
&lt;li>React&amp;rsquo;s primary tasks:
&lt;ul>
&lt;li>Work with the DOM/browser to render the UI&lt;/li>
&lt;li>Manage state for us between render cycles&lt;/li>
&lt;li>Keep the UI updated whenever state changes occur&lt;/li>
&lt;li>NOT: (out)side effects! Anything outside of React&amp;rsquo;s rage. E.g.:
&lt;ul>
&lt;li>localStorage.&lt;/li>
&lt;li>API/db interactions&lt;/li>
&lt;li>Subscriptions (.e.g. web sockets)&lt;/li>
&lt;li>Syncing 2 different internal states together&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://react.dev/learn/synchronizing-with-effects">Side Effects&lt;/a> in React: &lt;code>useEffect()&lt;/code> (&lt;a href="https://overreacted.io/a-complete-guide-to-useeffect/">complete guide&lt;/a>) - tool to interact with outside of the React&amp;rsquo;s ecosystem.
&lt;ul>
&lt;li>1st param: CB function. Everything inside is guaranteed to be run only after the component has been rendered. CB function always run after the first render.&lt;/li>
&lt;li>2nd param (optional): dependencies array. Values if they changed from one render to other the 1st param will run. &lt;strong>&lt;code>[]&lt;/code> means it will run only once&lt;/strong> (no dependencies to track).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>You really never want to use an async CB function for the &lt;code>React.useEffect&lt;/code>. An async function always returns a promise. So if you want an sync function in &lt;code>useEffect()&lt;/code> define an async function and call it. Doing async operations directly would clash the point below:&lt;/li>
&lt;li>Always cleanup things in the side effect (e.g. event listeners, WS connection etc.). &lt;code>useEffect()&lt;/code> &lt;strong>CB function can return a CB that will do the cleanup.&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="build-a-notes-app-and-a-tenzies-game">Build a notes app and a Tenzies game&lt;/h2>
&lt;h3 id="notes">Notes&lt;/h3>
&lt;ul>
&lt;li>Whenever the state changes, React re-renders the whole component.&lt;/li>
&lt;li>Lazy state initialization. Instead of providing a value for &lt;code>React.useState&lt;/code> provide a function. Any changes made after the initialization won&amp;rsquo;t re-run the function.&lt;/li>
&lt;li>&lt;code>event.stopPropagation()&lt;/code> stops propagating the click event to the parent.&lt;/li>
&lt;li>&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining">JS optional chaining&lt;/a> operator: &lt;code>notes[0]?.id&lt;/code>. Return &lt;code>id&lt;/code> or &lt;code>undefined&lt;/code> if the property before doesn&amp;rsquo;t exist.&lt;/li>
&lt;li>&lt;a href="https://console.firebase.google.com/">Firebase Console&lt;/a>&lt;/li>
&lt;li>&lt;code>firestore.onSnapshot&lt;/code> creates a WS connection with the DB (=&amp;gt; cleanup || memory leak). It returns a function to be called for cleanup.&lt;/li>
&lt;li>2nd parameter to &lt;code>onSnapshot&lt;/code> will be called always whenever there is an change to the 1st argument.&lt;/li>
&lt;li>Debouncing: delay the request for a specified amount of time (e.g. 500ms)&lt;/li>
&lt;/ul>
&lt;h3 id="tenzies">Tenzies&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.figma.com/file/FqsxRUhAaXM4ezddQK0CdR/Tenzies?type=design&amp;amp;node-id=0-1">Figma&lt;/a>&lt;/li>
&lt;li>NOTE: use better names (go simple). &lt;strong>Learn the domain vocabulary before coding&lt;/strong>.&lt;/li>
&lt;li>Keeping two internal peaces of state in-sync with each other is a good reason to use &lt;code>React.useEffect&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/ai/nanoid">nanoid&lt;/a> - unique string ID generator.&lt;/li>
&lt;/ul>
&lt;h3 id="quizzical">Quizzical&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.figma.com/file/E9S5iPcm10f0RIHK8mCqKL/Quizzical-App?type=design&amp;amp;node-id=0-1">figma&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/GastonPerez97/quizzical">source&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>CS50 React Native</title><link>http://uzak.github.io/post/2022-11-09-cs50_react_native/</link><pubDate>Wed, 09 Nov 2022 00:00:00 +0000</pubDate><guid>http://uzak.github.io/post/2022-11-09-cs50_react_native/</guid><description>&lt;p>&lt;a href="https://www.youtube.com/watch?v=X52b-8y2Hf4&amp;amp;list=PLLea03u4b2pZY6paU-jlGzuHHURF-5kFm">Youtube&lt;/a>&lt;/p>
&lt;h2 id="lecture-0-js">Lecture 0: JS&lt;/h2>
&lt;p>&lt;a href="https://cdn.cs50.net/mobile/2018/spring/lectures/0/lecture0.pdf">slides&lt;/a>&lt;/p>
&lt;ul>
&lt;li>Introduction&lt;/li>
&lt;li>Course information&lt;/li>
&lt;li>Syntax&lt;/li>
&lt;li>Types
&lt;ul>
&lt;li>dynamic types&lt;/li>
&lt;li>primitive types (no methods, immutable)
&lt;ul>
&lt;li>undefined&lt;/li>
&lt;li>null&lt;/li>
&lt;li>boolean&lt;/li>
&lt;li>number&lt;/li>
&lt;li>string&lt;/li>
&lt;li>(symbol)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>objects&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Typecasting
&lt;ul>
&lt;li>explicit&lt;/li>
&lt;li>implicit&lt;/li>
&lt;li>== (coerces the types) vs === (requires equivalent types)&lt;/li>
&lt;li>falsy
&lt;ul>
&lt;li>undefined&lt;/li>
&lt;li>null&lt;/li>
&lt;li>false&lt;/li>
&lt;li>+0, -0, NaN&lt;/li>
&lt;li>&amp;quot;&amp;quot;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>truthy
&lt;ul>
&lt;li>{}&lt;/li>
&lt;li>[]&lt;/li>
&lt;li>everything else&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Type demo
&lt;ul>
&lt;li>typeof operator&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Objects
&lt;ul>
&lt;li>&lt;code>const o = new Object()&lt;/code> OR &lt;code>const o2 = {}; o2.firstName = ''&lt;/code> OR &lt;code>const o3 = { firstName: '', greet(): function() {} }&lt;/code>&lt;/li>
&lt;li>Arrays, Functions - are objects&lt;/li>
&lt;li>Everything but primitive datatypes are objects&lt;/li>
&lt;li>Anything between [] when indexing will be coerced to a string. E.g. &lt;code>o[1]&lt;/code> -&amp;gt; &lt;code>o[&amp;quot;1&amp;quot;]&lt;/code>&lt;/li>
&lt;li>Primitives are immutable, objects are mutable and stored by reference&lt;/li>
&lt;li>&lt;code>Object.assign({}, o)&lt;/code> -&amp;gt; shallowCopy. Merges 1st arg into o.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Objects demo&lt;/li>
&lt;li>Object mutation
&lt;ul>
&lt;li>&lt;code>Object.assign(target, source)&lt;/code>: The Object.assign() method copies all enumerable own properties from one or more source objects to a target object. It returns the modified target object.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Prototypical inheritance
&lt;ul>
&lt;li>Each objects stores a reference to its prototype (&lt;code>obj.__proto__&lt;/code>)&lt;/li>
&lt;li>Properties/methods defined most tightly have most priority&lt;/li>
&lt;li>JS will automatically &amp;ldquo;box&amp;rdquo; (wrap) primitive values so you have access to methods.
&lt;ul>
&lt;li>&lt;code>42 instanceof Number&lt;/code> -&amp;gt; &lt;code>false&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Prototypical inheritance (reference to prototype instead of copies) is used to save resources.&lt;/li>
&lt;li>Danger: if you change the prototype it changes for every single value of that type. &lt;strong>DON&amp;rsquo;T change prototype&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Scope
&lt;ul>
&lt;li>variable lifetime
&lt;ul>
&lt;li>lexical scoping (var): declared until their function ends&lt;/li>
&lt;li>block scoping (const, let)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>variables without cost/let are global&lt;/li>
&lt;li>hoisting - take the definition and hoist it to the top of the file
&lt;ul>
&lt;li>var declaration&lt;/li>
&lt;li>function definition&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>JS engine
&lt;ul>
&lt;li>read entire file, throw a syntax error if found and store functions will be saved in memory&lt;/li>
&lt;li>execute it&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Global Object
&lt;ul>
&lt;li>all variables and functions are parameters and methods on the global object:
&lt;ul>
&lt;li>Browser: &lt;code>window&lt;/code>&lt;/li>
&lt;li>Node.js: &lt;code>global&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Closures
&lt;ul>
&lt;li>functions that refer to variables declared by parent function&lt;/li>
&lt;li>possible because of scoping&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="lecture-1-js-es6">Lecture 1: JS, ES6&lt;/h2>
&lt;p>&lt;a href="https://cdn.cs50.net/mobile/2018/spring/lectures/1/lecture1.pdf">slides&lt;/a>&lt;/p></description></item></channel></rss>