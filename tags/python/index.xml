<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on uzak.github.io</title><link>http://uzak.github.io/tags/python/</link><description>Recent content in Python on uzak.github.io</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 13 Dec 2019 00:00:00 +0000</lastBuildDate><atom:link href="http://uzak.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Testing Python</title><link>http://uzak.github.io/post/2019-12-13-python__testing/</link><pubDate>Fri, 13 Dec 2019 00:00:00 +0000</pubDate><guid>http://uzak.github.io/post/2019-12-13-python__testing/</guid><description>&lt;h1 id="chapter-1">Chapter 1&lt;/h1>
&lt;ul>
&lt;li>Writing code without tests in general is going to lead to problems down the line.&lt;/li>
&lt;li>Choreographing&lt;/li>
&lt;li>One of the worst traps a developer can fall into is writing a bunch of code and then going back and testing it all at the end.&lt;/li>
&lt;li>With the advent of social networks and the ever-increasing pressure of media attention, defects in your code could be costly to both you and your reputation or that of any company you may represent.&lt;/li>
&lt;li>The key advantage of writing tests, especially as part of the development process, is that testing gives you confidence in your code.&lt;/li>
&lt;/ul>
&lt;h1 id="chapter-2---writing-unittests">Chapter 2 - writing unittests&lt;/h1>
&lt;ul>
&lt;li>AN APPLICATION IS one of the great examples of the whole being greater than the sum of its parts.&lt;/li>
&lt;li>With a good test suite in place, refactoring is easy because you know when you change your code you havenâ€™t broken any previous behavior.&lt;/li>
&lt;li>Before you write any code you give thought to the kind of tests you will be writing to check the methods will work as expected.&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>assertEqual()
with assertRaises(Exception)
assertAlmostEqual(1, 1.2, delta=0.5)
assertAlmostEqual(1, 1.00001, places=4)
assertDictContainsSubset(expected, actual, msg=None)
assertDictEqual(d1, d2, msg=None)
assertGreater(a, b, msg=None)
assertGreaterEqual(a, b, msg=None)
assertIn(member, container, msg=None)
assertNotNone(obj, msg=None)
assertLess(a, b, msg=None)
assertItemsEqual(a, b, msg=None)
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Unit tests should be placed under a &lt;code>test/unit&lt;/code> directory at the top level of your project folder.&lt;/li>
&lt;li>All unit test files should mirror the name of the file they are testing, with &lt;code>_test&lt;/code> as the suffix.&lt;/li>
&lt;li>Example:
{% highlight python %}
import unittest&lt;/li>
&lt;/ul>
&lt;p>from calculate import Calculate&lt;/p></description></item></channel></rss>