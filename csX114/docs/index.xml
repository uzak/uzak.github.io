<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs on CS X114</title><link>https://uzak.github.com/csX114/docs/</link><description>Recent content in Docs on CS X114</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://uzak.github.com/csX114/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>02 Python and Data</title><link>https://uzak.github.com/csX114/docs/Course/02_python_and_data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/02_python_and_data/</guid><description>Python # Recap # Interactive Mode Scripts - files with .py extension Syntax and structure Syntax: rules, how code must be written. Semantics: Meaning of a statement or instruction. print() input() Variables # A variable is a name that stores a value, acting as a reference to that value in memory. It allows you to reuse and manipulate data in your programs. Example:
x = 10 # Integer y = &amp;#34;Hello&amp;#34; # String z = 3.</description></item><item><title>03 Control Strutures and Loops</title><link>https://uzak.github.com/csX114/docs/Course/03_control_structures_and_loops/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/03_control_structures_and_loops/</guid><description>Conditionals # Conditionals in a programming language are used to make decisions in the flow of a program based on whether certain conditions are met. They allow the program to execute different code paths depending on the evaluation of a condition (True or False).
if Statement # The if statement allows executing a block of code if a condition is True.
x = 10 if x &amp;gt; 5: print(&amp;#34;x is greater than 5&amp;#34;) # Output: x is greater than 5 Nested Conditions # x = 10 if x &amp;gt; 5: if x &amp;lt; 15: print(&amp;#34;x is between 5 and 15&amp;#34;) # Output: x is between 5 and 15 Logical Operations in Conditions # Combine conditions using and, or, and not.</description></item><item><title>04 Algorithms</title><link>https://uzak.github.com/csX114/docs/Course/04_algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/04_algorithm/</guid><description>What Is an Algorithm? # An algorithm is a step-by-step set of instructions designed to perform a specific task or solve a particular problem. It is the foundation of all computer programs and is used to process data, make decisions, or automate repetitive tasks.
Daily Life Examples of Algorithm # Making a Cup of Tea:
Step 1: Fill the kettle with water. Step 2: Boil the water. Step 3: Place a tea bag in a cup.</description></item><item><title>05 Functions</title><link>https://uzak.github.com/csX114/docs/Course/05_functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/05_functions/</guid><description>Funtions in Python # Introduction # Functions are reusable blocks of code that perform a specific task. They implement na algorithm. Moreover, they help us organize and structure our programs, avoid repetition, and improve readability.
Function reduce complexity, as the user (caller) of a function doesn&amp;rsquo;t need to know the algorithm, only what&amp;rsquo;s the input and expected output. Thus, from the perspective of the caller of the function it is a blackbox.</description></item><item><title>06 Structures</title><link>https://uzak.github.com/csX114/docs/Course/06_structures/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/06_structures/</guid><description>Structures # Structures in programming are ways to organize, store, and manage data efficiently. They determine how data is arranged in memory and how operations like accessing, adding, or modifying data can be performed.
Structures in Python are called collections and create complex data types out of primitive ones or other structures.
Tuple # Immutable, ordered collections of items.
Cannot be changed after creation. Just like strings. Use parentheses () to define.</description></item><item><title>07 Input/Output</title><link>https://uzak.github.com/csX114/docs/Course/07_io/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/07_io/</guid><description>Input/Output # Communication with the user and the environment.
String Interpolation # String interpolation is inserting variables or expressions into strings. Python offers several ways to achieve this:
f-strings (from Python 3.6): f&amp;quot;Hello, {name}&amp;quot;. str.format(): &amp;ldquo;Hello, {}&amp;quot;.format(name). % strings: &amp;ldquo;Hello, %s&amp;rdquo; % name We focus here only on the first method. Examples:
name = &amp;#34;Alice&amp;#34; age = 25 # Using f-strings greeting = f&amp;#34;Hello, {name}! You are {age} years old.</description></item><item><title>08 Errors and Exceptions</title><link>https://uzak.github.com/csX114/docs/Course/08_errors_and_exceptions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/08_errors_and_exceptions/</guid><description> Errors Exceptions Debugging Clean Code few rules</description></item><item><title>09 Modules</title><link>https://uzak.github.com/csX114/docs/Course/09_modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/09_modules/</guid><description> import Bateries Included: stdlib pypi</description></item><item><title>10 Projects</title><link>https://uzak.github.com/csX114/docs/Course/10_projects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/10_projects/</guid><description> Projects # Projects Git Basics Team Project 2 - 3 members</description></item><item><title>11 Fuctional Programming</title><link>https://uzak.github.com/csX114/docs/Course/11_fp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/11_fp/</guid><description> Functional Programming # filter reduce map list comprehension lambda functions generators</description></item><item><title>12 Object Oriented Programming</title><link>https://uzak.github.com/csX114/docs/Course/12_oop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/12_oop/</guid><description> Object Oriented Programming #</description></item><item><title>13 Road Map</title><link>https://uzak.github.com/csX114/docs/Course/13_road_map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/13_road_map/</guid><description> Road Map # venv argparse flask, django jinja2 requests re os / shutil decimal json itertools</description></item><item><title>14 Project Presentation</title><link>https://uzak.github.com/csX114/docs/Course/14_presentation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/14_presentation/</guid><description>TBD</description></item><item><title>Resources</title><link>https://uzak.github.com/csX114/docs/Course/resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/resources/</guid><description>Resources # Vimtutor. Web version of vimtutor that comes with VIM
OpenVIM - learn VIM interactively
Python Tutorial
Python String Formatting Documentation
Codewars - practice makes perfect</description></item></channel></rss>