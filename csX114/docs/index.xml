<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs on CS X114</title><link>https://uzak.github.com/csX114/docs/</link><description>Recent content in Docs on CS X114</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://uzak.github.com/csX114/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>02 Python and Data</title><link>https://uzak.github.com/csX114/docs/Course/02_python_and_data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/02_python_and_data/</guid><description>Python # Recap # Interactive Mode Scripts - files with .py extension Syntax and structure Syntax: rules, how code must be written. Semantics: Meaning of a statement or instruction. print() input() Variables # A variable is a name that stores a value, acting as a reference to that value in memory. It allows you to reuse and manipulate data in your programs. Example:
x = 10 # Integer y = &amp;#34;Hello&amp;#34; # String z = 3.</description></item><item><title>03 Control Strutures</title><link>https://uzak.github.com/csX114/docs/Course/03_control_structures/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/03_control_structures/</guid><description>Control Structures # Control structures are used to control the execution flow of the program.
bool Data Type # Valid values are True and False. Comparisons yield these values. Used in condition and logical operations.
&amp;gt;&amp;gt;&amp;gt; # Booleans represent True or False &amp;gt;&amp;gt;&amp;gt; t = True &amp;gt;&amp;gt;&amp;gt; f = False &amp;gt;&amp;gt;&amp;gt; # Check the type of a boolean &amp;gt;&amp;gt;&amp;gt; type(t) &amp;lt;class &amp;#39;bool&amp;#39;&amp;gt; &amp;gt;&amp;gt;&amp;gt; # Boolean operations &amp;gt;&amp;gt;&amp;gt; t and f # Logical AND (yields True if both operands are True) False &amp;gt;&amp;gt;&amp;gt; t or f # Logical OR (yields True if any of the operands is True) True &amp;gt;&amp;gt;&amp;gt; not t # Logical NOT False &amp;gt;&amp;gt;&amp;gt; # Booleans with comparison operators &amp;gt;&amp;gt;&amp;gt; 5 &amp;gt; 3 True &amp;gt;&amp;gt;&amp;gt; 5 &amp;lt; 3 False &amp;gt;&amp;gt;&amp;gt; 5 == 5 True &amp;gt;&amp;gt;&amp;gt; 5 !</description></item><item><title>04 Algorithms</title><link>https://uzak.github.com/csX114/docs/Course/04_algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/04_algorithm/</guid><description>What Is an Algorithm? # An algorithm is a step-by-step set of instructions designed to perform a specific task or solve a particular problem. It is the foundation of all computer programs and is used to process data, make decisions, or automate repetitive tasks.
Daily Life Examples of Algorithm # Making a Cup of Tea:
Step 1: Fill the kettle with water. Step 2: Boil the water. Step 3: Place a tea bag in a cup.</description></item><item><title>05 Functions</title><link>https://uzak.github.com/csX114/docs/Course/05_functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/05_functions/</guid><description>Funtions in Python # Introduction # Functions are reusable blocks of code that perform a specific task. They implement na algorithm. Moreover, they help us organize and structure our programs, avoid repetition, and improve readability.
Function reduce complexity, as the user (caller) of a function doesn&amp;rsquo;t need to know the algorithm, only what&amp;rsquo;s the input and expected output. Thus, from the perspective of the caller of the function it is a blackbox.</description></item><item><title>06 Structures</title><link>https://uzak.github.com/csX114/docs/Course/06_structures/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/06_structures/</guid><description>Structures # Structures in programming are ways to organize, store, and manage data efficiently. They determine how data is arranged in memory and how operations like accessing, adding, or modifying data can be performed.
Structures in Python are called collections and create complex data types out of primitive ones or other structures.
Tuple # Immutable, ordered collections of items.
Cannot be changed after creation. Just like strings. Use parentheses () to define.</description></item><item><title>07 Input/Output</title><link>https://uzak.github.com/csX114/docs/Course/07_io/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/07_io/</guid><description>Input/Output # Communication with the user and the environment.
String Interpolation # String interpolation is inserting variables or expressions into strings. Python offers several ways to achieve this:
f-strings (from Python 3.6): f&amp;quot;Hello, {name}&amp;quot;. str.format(): &amp;ldquo;Hello, {}&amp;quot;.format(name). % strings: &amp;ldquo;Hello, %s&amp;rdquo; % name We focus here only on the first method. Examples:
name = &amp;#34;Alice&amp;#34; age = 25 # Using f-strings greeting = f&amp;#34;Hello, {name}! You are {age} years old.</description></item><item><title>08 Errors and Exceptions</title><link>https://uzak.github.com/csX114/docs/Course/08_errors_and_exceptions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/08_errors_and_exceptions/</guid><description>Errors and Exceptions # Errors: Issues in the syntax or runtime of a program that cause it to stop. Exceptions: Errors detected during execution. Handling errors/exceptoins is essential!
Types of Errors # Below you&amp;rsquo;ll find some types of errors. Please spot and fix them.
Syntax Errors # print(&amp;#34;Hello World&amp;#34; Runtime Errors # x = 10 / 0 Difficult to handle beforehand.
Logical Errors # Also called bugs. Here is a program to sum up to numbers 1 to 5 inclusively.</description></item><item><title>09 Modules</title><link>https://uzak.github.com/csX114/docs/Course/09_modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/09_modules/</guid><description>Modules # Introduction # A module is a Python file containing definitions and statements that can be reused in other Python programs. Why?
Organize code. Promote code reuse. If you don&amp;rsquo;t you allow bugs to multiply and you&amp;rsquo;ll have to fix them wheever you copied the code. Use built-in functionalities provided by Python and the community. Saves a lot of effort Allows for RAD (Rapid Application Development) Create # Create a file called math_utils.</description></item><item><title>10 Projects</title><link>https://uzak.github.com/csX114/docs/Course/10_projects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/10_projects/</guid><description>Projects # A project is a temporary endeavor undertaken to create a unique product, service, or result. Key characteristics:
Clear objectives Defined scope Collaboration Time-bound Most of the work in IT is done in the context of projects. Examples of successful projects:
Open-source contributions (e.g., Linux, Python). Game development (e.g., Minecraft started as a side project). GIT # Version control system for tracking changes in source code. Collaboration tool for developers working on the same project.</description></item><item><title>11 Fuctional Programming</title><link>https://uzak.github.com/csX114/docs/Course/11_fp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/11_fp/</guid><description>Functional Programming # Filter # Filters elements of a sequence based on a function that returns True or False.
# Example: Filtering even numbers from a list numbers = [1, 2, 3, 4, 5, 6] even_numbers = list(filter(lambda x: x % 2 == 0, numbers)) print(even_numbers) # Output: [2, 4, 6] The list around filter is there so we don&amp;rsquo;t have to deal with generators, which is one of the more advanced topics in Python.</description></item><item><title>12 Object Oriented Programming</title><link>https://uzak.github.com/csX114/docs/Course/12_oop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/12_oop/</guid><description>Object Oriented Programming # OOP is a programming paradigm based on the concept of objects. An object is a self-contained entity that contains data (attributes) and functions (methods) that operate on that data. OOP organizes code into reusable and logical structures called classes, which serve as blueprints for creating objects.
Why is OOP Used?
Code Reusability: Through inheritance, OOP allows sharing and reusing common code, reducing duplication. Modularity: By encapsulating data and methods within classes, OOP promotes better organization and separation of concerns.</description></item><item><title>13 Recap &amp; Road Map</title><link>https://uzak.github.com/csX114/docs/Course/13_road_map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/13_road_map/</guid><description>Road Map # Python is great for prototyping. Maybe it won&amp;rsquo;t make for the most efficient application, but you&amp;rsquo;ll be able to create it in no time (RAD). That said, Python is very good to test out concepts.
To improving your core programming skills (in Python):
practice: codewars and the like learn advanced Python: OOP, decorators, generators, context managers clean code Some of the useful modules you&amp;rsquo;d better know about:</description></item><item><title>14 Project Presentation</title><link>https://uzak.github.com/csX114/docs/Course/14_presentation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/14_presentation/</guid><description>This class will be used for your project presentation. Make it an elevator pitch supported by slides and showcasing your project. SELL IT!
Each team has 5 min. All team members should speak.
After the presentation all the other students give feedback. Students split equally into six groups and give feedback on the following points:
Clarity Was the project idea clear and easy to understand? Did the team explain the purpose and problem their project solves?</description></item><item><title>Codewars</title><link>https://uzak.github.com/csX114/docs/Course/codewars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/codewars/</guid><description>Get an account on codewars.com and start training. Practice makes a master, for as they say:
In theory there is no difference between theory and practice. In practice, there is. &amp;ndash; Yogi Berra
Getting your feet wet # Can be started after class no. 5 (functions).
8: Convert a String to a Number! 8: Returning Strings 8: Jenny&amp;rsquo;s secret message 8: Even or Odd 8: Remove First and Last Character 8: String repeat 8: Sentence Smash 8: Are you playing Banjo 8: A Needle in the Haystack 8: Multiply 8: Stringy Strings 8: Is it a number 8: Grasshoper - Grade Book 8: Remove spaces 8: Abbreviate a Two Word Name 8: Is the string uppercase?</description></item><item><title>Control Questions</title><link>https://uzak.github.com/csX114/docs/Course/control_questions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/control_questions/</guid><description>What datatypes in python you know? Use the names as they are to be found in Python. What&amp;rsquo;s the name of the data type for True and False values. Is it safe to use == to compare floats? How to check if the string &amp;quot;hello&amp;quot; is contained in the variable greeting. What&amp;rsquo;s the difference between a statement and an expression. Provide an example for each. What&amp;rsquo;s the statement used to conditionally execute a block of code?</description></item><item><title>Python Spellbook</title><link>https://uzak.github.com/csX114/docs/Course/spellbook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/spellbook/</guid><description>As a Python Wizard you&amp;rsquo;d add a wide range of spells to your spelbook and know what they do and how to use the. If not sure, use help(), e.g. help(str.split):
print() input() help() int() float() arithmetical operators: (+, -, /, *, %, //, **) str() indexing slicing str.lower() str.upper() str.strip() str.lstrip() str.rstrip() str.split() str.join() in operator f-string multiline strings (&amp;#34;&amp;#34;&amp;#34; or &amp;#39;&amp;#39;&amp;#39;) bool() True False None if if-elif if-elif-else and or not while for break continue range() pass def tuple() list() set() dict() open() with open(.</description></item><item><title>Resources</title><link>https://uzak.github.com/csX114/docs/Course/resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/resources/</guid><description>Resources # Vimtutor. Web version of vimtutor that comes with VIM OpenVIM - learn VIM interactively Python Tutorial Python String Formatting Documentation Attendance and Grading Spring 2025 Codewars - practice makes perfect Games # CodeCombat - 10 EUR/month; for complete beginners Code World - 5 EUR; good to learn syntax and nested code CodinGame - free; good to learn the syntax The Farmer Was Replaced - 6.89 EUR; good to learn the Syntax, good for beginners and more advanced students; nice graphics Interplayer - 3 EUR; to learn how to solve mathematical problems w.</description></item><item><title>Workshop - Order in Chaos</title><link>https://uzak.github.com/csX114/docs/Course/workshop_order/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/workshop_order/</guid><description>Task 1 (5 min) # What do you associate with &amp;ldquo;chaos&amp;rdquo;, what with &amp;ldquo;kosmos&amp;rdquo;? What&amp;rsquo;s the difference. Create groups of 3 and discuss. You&amp;rsquo;ll be presenting the results there after.
Chaos vs. Kosmos # kha - space Dark space: chaos of the darkness of night (n - waters) Light space: order in the space (r - reach, d - light) Task 2 (5 min) # What do &amp;ldquo;order&amp;rdquo; and &amp;ldquo;hierarchy&amp;rdquo; mean to you?</description></item><item><title>Workshop - Unix</title><link>https://uzak.github.com/csX114/docs/Course/workshop_unix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/workshop_unix/</guid><description>Introduction to UNIX # What is UNIX? Where do we find UNIX nowdayas? Linux Android Cloud (AWS, Google) Raspberry PI *BSD (networking) MacOS CLI vs. GUI Terminal/Console Start a terminal Linux: CTRL + ALT + t Basic Commands print working directory m@t14s:~$ # prompt string (user@hostname:directory$) m@t14s:~$ pwd /home/m changing directory m@t14s:~$ cd Desktop # change to a relative path m@t14s:~/Desktop$ cd # go to home directory (~) m@t14s:~$ cd - # go to previous directory /home/m/Desktop m@t14s:~/Desktop$ cd /tmp # change to absolute path m@t14s:/tmp$ cd ~/Desktop/ # to Desktop in home directory m@t14s:~/Desktop$ create directory m@t14s:~$ mkdir sandbox list a directory (ls) m@t14s:~$ cd sandbox m@t14s:~/sandbox$ m@t14s:~/sandbox$ echo &amp;#39;python(&amp;#34;Hello World!</description></item><item><title>Workshop - VSCode</title><link>https://uzak.github.com/csX114/docs/Course/workshop_vscode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/workshop_vscode/</guid><description>File System # A file system (FS) is the way an operating system organizes and manages data on a storage device, such as a hard drive or USB stick. It keeps track of files and directories, allowing users to store, retrieve, and modify data efficiently. A file system provides a structured way to name files, control access, and manage storage space. Common file systems include NTFS (Windows), ext4 (Linux), and FAT32 (USB drives).</description></item></channel></rss>