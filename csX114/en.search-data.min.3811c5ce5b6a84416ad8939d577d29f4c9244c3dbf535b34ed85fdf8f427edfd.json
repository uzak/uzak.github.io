[{"id":0,"href":"/csX114/docs/Course/01_computers_and_programming/","title":"01 Introduction into Computers and Programming","section":"Docs","content":" Introduction to Computers and Programming # What is a Computer? # Electronic device that proccess data by following a set of instructions (= program). It can perform calculations, store and retrieve information and controlls devices.\nVon Neumann Architecture # Proposed by John von Neumann in 1945.\nInput devices # Serve to enter data and instructions. Analogy: like your senses - they gather information for the computer from the outside worlds. Examples:\nKeyboard Mouse Microphone Scanner Touch display Output devices # Present results of computer’s processing to the user. Examples:\nMonitor Printers Speakers Analogy: your actions. You communicate with (towards) the world by them.\nHow does a CPU work? # Control Unit (CU): The Brain of the computer. Control Unit directs flow between memory, CPU, I/O devices Arithmetic Logic Unit (ALU): performs arithmetic (+, -, …) and logical operations (AND, OR). Logical operations are also called boolean operations after George Boole. True is often represented as 1 and False as 0.\nLogical AND # Input A Input B A ∧ B 0 0 0 0 1 0 1 0 0 1 1 1 Logical OR # Input A Input B A ∨ B 0 0 0 0 1 1 1 0 1 1 1 1 Memory and Storage # Registers # Registers are small, high-speed storage locations within the CPU itself. Extremely fast (much faster than memory or storage). Very limited in size (typically 8, 16, 32, or 64 bits wide, depending on the CPU architecture). Registers fetch instructions from memory, store intermediate computation results, and provide operands for the CPU. RAM # Memory is the part of the system used for temporarily storing data and instructions that the CPU needs during program execution. It acts as the workspace for active processes and provides data to the CPU. Stores instructions fetched from storage so that they can be quickly accessed. Slower than registers but faster than storage. Larger in size compared to registers (e.g., modern systems have several GBs of RAM). Volatile: contents are lost when power is turned off. The CPU reads instructions and data from memory into registers. Once a task is complete, results may be written back to memory. Storage # Storage refers to non-volatile devices, such as hard drives (HDDs), solid-state drives (SSDs), or even cloud storage (e.g. AWS S3). Long-term retention of data and programs, even when the computer is turned off. Much slower than both memory and registers. Much larger capacity compared to memory and registers (e.g., modern systems often have TBs of storage). Operating Systems # An Operating System (OS) is software that manages a computer’s hardware and software resources, acting as an intermediary between users and the computer hardware. It ensures efficient execution of programs, resource allocation, and system stability.\nFunctions # Process Management Memory Management File System Management Device Management User Interface Types # Windows UNIX Linux Android macOS iOS Programming Languages # Programming languages are the medium for humans to write programs that a computer can execute. They are needed to:\nBridge the gap: Computers understand only binary (0 and 1). Computer languages allow for writing instructions in a human readable form. Simplification : allow to break down problems into Resuse: programs can be reused and automate repetitive tasks. Types # Low-Level Languages # Machine Language: Example: 10110000 01100001 Assembly langauage: symbolic representation of machine language using mnemonics. Example: MOV A, 5 ADD B, A High-Level Languages # Designed to be easier to read and write, closer to human languages. Requires a compiler or interpreter (or both) to translate into machine code. Examples:\nC: very low-level and thus performant. Compiled. Non-portable. Java: First compiled. Then resulting code is interpreted in the Java Virtual Machine. Cross-platform. Popular for enterprise apps. JavaScript: Very high level. Leans closer to C-style syntax. Used in browsers to create Frontends. Python: Very high level, easy to read, beginner friendly. Cross-platform. Popular for data-science (AI), prototyping and scripting. High level scripting languages are used for automating tasks. Examples:\nPython Bash Compiled vs. Interpreted # Computer only understands machine code Some languages compile their files into machine code (e.g. C) Some take the source code and interpret it (e.g. Python) Some use both approaches (e.g. Java) Usually low-level (performant) languages are compiled and high-level (closer to human thinking) are interprete.\nCommon Characteristics # Syntax: rules, how code must be written. Semantics: Meaning of a statement or instruction. Example: print(\u0026#34;Hello\u0026#34;) 2+2 Control Structures: loops and condititionals that control the flow of exeuction. Example if, while. Categories of High-Level Languages # Procedural: focus on a sequence of steps to solve a problem. Example: C. Object-Oriented: model entities of outside worlds as objects encapsulating data and behavior. Example: Java, C++. Functional: focus on mathematical functions. Example: Haskell. Logical: express facts and rules for reasoning. Example: Prolog. Some programming languages fit into several categories, e.g. Python and Javascript support both procedural, object-oriented and functional programming.\nHomework # Install htop. Don’t know how? Use Google/ChatGPT. Make a screenshot. Identify any process and explain what its values mean. "},{"id":1,"href":"/csX114/docs/Course/02_python_and_data/","title":"02 Python and Data","section":"Docs","content":" Python # Recap # Interactive Mode Scripts Syntax and structure Syntax: rules, how code must be written. Semantics: Meaning of a statement or instruction. print() input() Variables # A variable is a name that stores a value, acting as a reference to that value in memory. It allows you to reuse and manipulate data in your programs. Example:\nx = 10 # Integer y = \u0026#34;Hello\u0026#34; # String z = 3.14 # Float x = \u0026#34;Now I\u0026#39;m a string!\u0026#34; # Reasignment Rules for Variable Names:\nMust start with a letter or an underscore (_). Cannot start with a number. Can contain letters, numbers, and underscores. Cannot use Python keywords (e.g., if, else, class). Snake Case # Snake case is a naming convention where words are written in lowercase and separated by underscores (_). It is commonly used in Python for variable and function names to improve readability.\nComments # # this is the first comment spam = 1 # and this is the second comment # ... and now a third! text = \u0026#34;# This is not a comment because it\u0026#39;s inside quotes.\u0026#34; Statements and Expressions # Statement is a command. Does something, but not necessarily return a value. Expression is a combination of values, variables, operators, funtion calls that evaluates to a value # Variable assignment (statement) x = 10 # Print statement print(\u0026#34;Hello, World!\u0026#34;) # Control structure (if statement) if x \u0026gt; 5: print(\u0026#34;x is greater than 5\u0026#34;) # Arithmetic expression 5 + 3 # Evaluates to 8 # Logical expression x \u0026gt; 5 # Evaluates to True or False # Function call as an expression len(\u0026#34;Python\u0026#34;) # Evaluates to 6 # String concatenation as an expression \u0026#34;Hello\u0026#34; + \u0026#34; World\u0026#34; # Evaluates to \u0026#34;Hello World\u0026#34; You can execute several statements in one line (and expressions). Don\u0026rsquo;t do that! Stick to one idea/task/expression per line.\nData # Data refers to information or values that a computer program processes, stores, or manipulates. It can be as simple as a single number or as complex as a collection of multimedia files. In programming, data is categorized into data types, which define the kind of value and what operations can be performed on it.\nAn operator is a symbol or keyword in programming that performs an action or operation on data (called operands). For example, + is an operator that adds two numbers.\nNumeric # Integer: int Float: float Complex: complex \u0026gt;\u0026gt;\u0026gt; # Let\u0026#39;s start with integers and floats \u0026gt;\u0026gt;\u0026gt; x = 42 # An integer \u0026gt;\u0026gt;\u0026gt; y = 3.14 # A float \u0026gt;\u0026gt;\u0026gt; # Check their types \u0026gt;\u0026gt;\u0026gt; type(x) \u0026lt;class \u0026#39;int\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; type(y) \u0026lt;class \u0026#39;float\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; # Perform basic arithmetic operations \u0026gt;\u0026gt;\u0026gt; x + y # Addition 45.14 \u0026gt;\u0026gt;\u0026gt; x - y # Subtraction 38.86 \u0026gt;\u0026gt;\u0026gt; x * y # Multiplication 131.88 \u0026gt;\u0026gt;\u0026gt; x / y # Division (always returns float) 13.375796178343949 \u0026gt;\u0026gt;\u0026gt; # Floor division and modulus \u0026gt;\u0026gt;\u0026gt; x // 5 # Integer division 8 \u0026gt;\u0026gt;\u0026gt; x % 5 # Remainder Create a program that will read three numbers and sum them. Then it will print the result and it\u0026amp;#x2019;s type (which should be one of the numeric).2 \u0026gt;\u0026gt;\u0026gt; # Exponentiation \u0026gt;\u0026gt;\u0026gt; 2 ** 3 # 2 raised to the power of 3 8 \u0026gt;\u0026gt;\u0026gt; # Working with floats \u0026gt;\u0026gt;\u0026gt; z = 7.5 / 2 # Division with a float result \u0026gt;\u0026gt;\u0026gt; z 3.75 \u0026gt;\u0026gt;\u0026gt; # Rounding floats \u0026gt;\u0026gt;\u0026gt; round(z, 1) # Round to 1 decimal place 3.8 \u0026gt;\u0026gt;\u0026gt; # Type conversions \u0026gt;\u0026gt;\u0026gt; int(z) # Convert float to integer (truncates) 3 \u0026gt;\u0026gt;\u0026gt; float(x) # Convert integer to float 42.0 \u0026gt;\u0026gt;\u0026gt; # Handling very large numbers \u0026gt;\u0026gt;\u0026gt; big_number = 12345678901234567890 \u0026gt;\u0026gt;\u0026gt; big_number * 2 24691357802469135780 \u0026gt;\u0026gt;\u0026gt; # Scientific notation for small numbers \u0026gt;\u0026gt;\u0026gt; small_number = 1e-10 # Equivalent to 0.0000000001 \u0026gt;\u0026gt;\u0026gt; small_number 1e-10 \u0026gt;\u0026gt;\u0026gt; # Some built-in functions \u0026gt;\u0026gt;\u0026gt; abs(-42) # Absolute value 42 \u0026gt;\u0026gt;\u0026gt; pow(2, 3) # 2 raised to the power of 3 (same as 2 ** 3) 8 Text # String: str \u0026gt;\u0026gt;\u0026gt; # Let\u0026#39;s start with basic strings \u0026gt;\u0026gt;\u0026gt; name = \u0026#34;Alice\u0026#34; \u0026gt;\u0026gt;\u0026gt; greeting = \u0026#34;Hello\u0026#34; \u0026gt;\u0026gt;\u0026gt; # Check the type of a string \u0026gt;\u0026gt;\u0026gt; type(name) \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; # Concatenate strings \u0026gt;\u0026gt;\u0026gt; full_greeting = greeting + \u0026#34;, \u0026#34; + name + \u0026#34;!\u0026#34; \u0026gt;\u0026gt;\u0026gt; full_greeting \u0026#39;Hello, Alice!\u0026#39; \u0026gt;\u0026gt;\u0026gt; # Repeating strings \u0026gt;\u0026gt;\u0026gt; excited_greeting = full_greeting * 2 \u0026gt;\u0026gt;\u0026gt; excited_greeting \u0026#39;Hello, Alice!Hello, Alice!\u0026#39; \u0026gt;\u0026gt;\u0026gt; # Accessing characters by index \u0026gt;\u0026gt;\u0026gt; full_greeting[0] # First character \u0026#39;H\u0026#39; \u0026gt;\u0026gt;\u0026gt; full_greeting[-1] # Last character \u0026#39;!\u0026#39; \u0026gt;\u0026gt;\u0026gt; # Slicing strings \u0026gt;\u0026gt;\u0026gt; full_greeting[0:5] # First 5 characters \u0026#39;Hello\u0026#39; \u0026gt;\u0026gt;\u0026gt; full_greeting[7:] # Everything from index 7 onwards \u0026#39;Alice!\u0026#39; \u0026gt;\u0026gt;\u0026gt; full_greeting[:5] # Everything up to index 5 (exclusive) \u0026#39;Hello\u0026#39; \u0026gt;\u0026gt;\u0026gt; # String length \u0026gt;\u0026gt;\u0026gt; len(full_greeting) 13 \u0026gt;\u0026gt;\u0026gt; # Converting case \u0026gt;\u0026gt;\u0026gt; full_greeting.upper() # Uppercase \u0026#39;HELLO, ALICE!\u0026#39; \u0026gt;\u0026gt;\u0026gt; full_greeting.lower() # Lowercase \u0026#39;hello, alice!\u0026#39; \u0026gt;\u0026gt;\u0026gt; # Stripping whitespace \u0026gt;\u0026gt;\u0026gt; padded = \u0026#34; hello, world! \u0026#34; \u0026gt;\u0026gt;\u0026gt; padded.strip() \u0026#39;hello, world!\u0026#39; \u0026gt;\u0026gt;\u0026gt; padded.lstrip() \u0026#39;hello, world! \u0026#39; \u0026gt;\u0026gt;\u0026gt; padded.rstrip() \u0026#39; hello, world!\u0026#39; \u0026gt;\u0026gt;\u0026gt; # Splitting strings \u0026gt;\u0026gt;\u0026gt; sentence = \u0026#34;Python is awesome\u0026#34; \u0026gt;\u0026gt;\u0026gt; words = sentence.split() # Split into a list of words \u0026gt;\u0026gt;\u0026gt; words [\u0026#39;Python\u0026#39;, \u0026#39;is\u0026#39;, \u0026#39;awesome\u0026#39;] \u0026gt;\u0026gt;\u0026gt; # Joining strings \u0026gt;\u0026gt;\u0026gt; \u0026#34;-\u0026#34;.join(words) # Combine words with a hyphen \u0026#39;Python-is-awesome\u0026#39; \u0026gt;\u0026gt;\u0026gt; # Checking substrings \u0026gt;\u0026gt;\u0026gt; \u0026#34;awesome\u0026#34; in sentence # Is \u0026#34;awesome\u0026#34; part of the sentence? True \u0026gt;\u0026gt;\u0026gt; \u0026#34;boring\u0026#34; in sentence False \u0026gt;\u0026gt;\u0026gt; # Replacing parts of a string \u0026gt;\u0026gt;\u0026gt; sentence.replace(\u0026#34;awesome\u0026#34;, \u0026#34;fantastic\u0026#34;) \u0026#39;Python is fantastic\u0026#39; \u0026gt;\u0026gt;\u0026gt; # Formatting strings \u0026gt;\u0026gt;\u0026gt; age = 25 \u0026gt;\u0026gt;\u0026gt; formatted = f\u0026#34;My name is {name} and I am {age} years old.\u0026#34; \u0026gt;\u0026gt;\u0026gt; formatted \u0026#39;My name is Alice and I am 25 years old.\u0026#39; \u0026gt;\u0026gt;\u0026gt; # Advanced formatting \u0026gt;\u0026gt;\u0026gt; pi = 3.14159 \u0026gt;\u0026gt;\u0026gt; f\u0026#34;The value of pi is approximately {pi:.2f}\u0026#34; # Format to 2 decimal places \u0026#39;The value of pi is approximately 3.14\u0026#39; Boolean # Boolean: bool Valid values are True and False. Comparisons yield these values. \u0026gt;\u0026gt;\u0026gt; # Booleans represent True or False \u0026gt;\u0026gt;\u0026gt; a = True \u0026gt;\u0026gt;\u0026gt; b = False \u0026gt;\u0026gt;\u0026gt; # Check the type of a boolean \u0026gt;\u0026gt;\u0026gt; type(a) \u0026lt;class \u0026#39;bool\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; # Boolean operations \u0026gt;\u0026gt;\u0026gt; a and b # Logical AND False \u0026gt;\u0026gt;\u0026gt; a or b # Logical OR True \u0026gt;\u0026gt;\u0026gt; not a # Logical NOT False \u0026gt;\u0026gt;\u0026gt; # Booleans with comparison operators \u0026gt;\u0026gt;\u0026gt; 5 \u0026gt; 3 # Greater than True \u0026gt;\u0026gt;\u0026gt; 5 \u0026lt; 3 # Less than False \u0026gt;\u0026gt;\u0026gt; 5 == 5 # Equal to True \u0026gt;\u0026gt;\u0026gt; 5 != 3 # Not equal to True \u0026gt;\u0026gt;\u0026gt; # Combining comparisons \u0026gt;\u0026gt;\u0026gt; 5 \u0026gt; 3 and 2 \u0026lt; 4 True \u0026gt;\u0026gt;\u0026gt; 5 \u0026gt; 3 or 2 \u0026gt; 4 True \u0026gt;\u0026gt;\u0026gt; not (5 \u0026gt; 3) False \u0026gt;\u0026gt;\u0026gt; # Booleans with arithmetic operations \u0026gt;\u0026gt;\u0026gt; True + 1 # True is treated as 1 2 \u0026gt;\u0026gt;\u0026gt; False + 1 # False is treated as 0 1 \u0026gt;\u0026gt;\u0026gt; # Boolean casting \u0026gt;\u0026gt;\u0026gt; bool(1) # Non-zero numbers are True True \u0026gt;\u0026gt;\u0026gt; bool(0) # Zero is False False \u0026gt;\u0026gt;\u0026gt; bool(\u0026#34;Hello\u0026#34;) # Non-empty strings are True True \u0026gt;\u0026gt;\u0026gt; bool(\u0026#34;\u0026#34;) # Empty strings are False False \u0026gt;\u0026gt;\u0026gt; bool([]) # Empty lists are False False \u0026gt;\u0026gt;\u0026gt; bool([1, 2, 3]) # Non-empty lists are True True \u0026gt;\u0026gt;\u0026gt; # Practical examples \u0026gt;\u0026gt;\u0026gt; is_adult = 18 \u0026gt;= 18 # Comparison to check if someone is an adult \u0026gt;\u0026gt;\u0026gt; is_adult True input() always returns a string, even if the user enter digits. It\u0026rsquo;s your job to convert it to number. Example:\n\u0026gt;\u0026gt;\u0026gt; number = input(\u0026#34;Please enter a number: \u0026#34;) Please enter a number: 42 \u0026gt;\u0026gt;\u0026gt; number \u0026#39;42\u0026#39; \u0026gt;\u0026gt;\u0026gt; type(number) \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; number = int(number) \u0026gt;\u0026gt;\u0026gt; type(number) \u0026lt;class \u0026#39;int\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; number 42 None # None is a special constant in Python that represents the absence of a value or a null value.\n\u0026gt;\u0026gt;\u0026gt; x = None \u0026gt;\u0026gt;\u0026gt; x is None True \u0026gt;\u0026gt;\u0026gt; x is not None False \u0026gt;\u0026gt;\u0026gt; Homework (graded) # Create a program that will read three numbers, store them in three distinct variables and then sum them. Then it will print the result and it\u0026rsquo;s type (which should be one of the numeric).\n"},{"id":2,"href":"/csX114/docs/Course/03_control_structures_and_loops/","title":"03 Control Strutures and Loops","section":"Docs","content":" Conditionals # if Statement # Nested Conditions # Logical Operations in Conditions # if-else Statement # if-elif-else Statement # Loops # while # break and continue # for # range() function # nested loops # infinite loops # pass # Homework (graded) # conditionals # Create a calculator that will ask the user for operand1, operation (+/-/*/division), operand2 and will read the values, convert them to numbers and print the result\nloops # Create a Number Guessing Game in Python. Write a Python program that allows a user to guess a secret number between 1 and 10. The program should guide the user by providing feedback on whether their guess is too low, too high, or correct. The game continues until the user guesses the correct number.\n"},{"id":3,"href":"/csX114/docs/Course/04_algorithm/","title":"04 Algorithms","section":"Docs","content":" What Is an Algorithm? # An algorithm is a step-by-step set of instructions designed to perform a specific task or solve a particular problem. It is the foundation of all computer programs and is used to process data, make decisions, or automate repetitive tasks.\nDaily Life Examples of Algorithm # Making a Cup of Tea:\nStep 1: Fill the kettle with water. Step 2: Boil the water. Step 3: Place a tea bag in a cup. Step 4: Pour boiling water into the cup. Step 5: Add sugar/milk if desired. Step 6: Stir and serve. Finding a Word in a Dictionary:\nStep 1: Open the dictionary. Step 2: Locate the section based on the first letter of the word. Step 3: Narrow down based on the second and subsequent letters. Step 4: Find the word and read its definition. Crossing the Street:\nStep 1: Look left. Step 2: Look right. Step 3: Look left again. Step 4: If the road is clear, cross; otherwise, wait. Key Features of an Algorithm: # Input: The algorithm accepts zero or more inputs to work with. Output: The algorithm produces one (or multiple) result or outcome. Definiteness: Each step must be clearly defined without ambiguity. Finiteness: The algorithm must terminate after a finite number of steps. Effectiveness: Each step of the algorithm can be performed in a finite amount of time using available resources. KISS (Keep It Simple Stupid)\nWhat Is Pseudocode? # Pseudocode is a simplified, informal way of writing algorithms that uses plain language and basic programming constructs without worrying about syntax. It bridges the gap between human thinking and actual code. Example of Pseudocode:\nTask: Find the largest number in a list.\n(1. Start) 2. Initialize a variable Max to the first element of the list. 3. For each element in the list: a. If the element is greater than Max: i. Set Max to this element. 4. Output Max. (5. End) Advantages of Using Pseudocode # Language-Independent: It\u0026rsquo;s not tied to a specific programming language. Focus on Logic: Allows the designer to focus on the algorithm\u0026rsquo;s structure without worrying about syntax. Easy to Understand: Non-programmers can follow and provide feedback. MSI # Manually Step-by-Step Impelement "},{"id":4,"href":"/csX114/docs/Course/05_functions/","title":"05 Functions","section":"Docs","content":" basic function defintion arguments positional default arbitrary argument list keyword arguments docstring "},{"id":5,"href":"/csX114/docs/Course/06_structures/","title":"06 Structures","section":"Docs","content":" tuple list set dict "},{"id":6,"href":"/csX114/docs/Course/07_io/","title":"07 Input/Output","section":"Docs","content":" string interpolation Console Files with "},{"id":7,"href":"/csX114/docs/Course/08_errors_and_exceptions/","title":"08 Errors and Exceptions","section":"Docs","content":" Errors Exceptions Debugging Clean Code few rules "},{"id":8,"href":"/csX114/docs/Course/09_modules/","title":"09 Modules","section":"Docs","content":" import Bateries Included: stdlib pypi "},{"id":9,"href":"/csX114/docs/Course/11_fp/","title":"10 Fuctional Programming","section":"Docs","content":" Functional Programming # filter reduce map list comprehension lambda functions generators "},{"id":10,"href":"/csX114/docs/Course/12_oop/","title":"12 Object Oriented Programming","section":"Docs","content":" Object Oriented Programming # "},{"id":11,"href":"/csX114/docs/Course/13_road_map/","title":"13 Road Map","section":"Docs","content":" Road Map # venv "},{"id":12,"href":"/csX114/docs/Course/14_presentation/","title":"14 Project Presentation","section":"Docs","content":"TBD\n"},{"id":13,"href":"/csX114/docs/Course/10_projects/","title":"Projects","section":"Docs","content":" Projects # Projects Git Basics Team Project 2 - 3 members "},{"id":14,"href":"/csX114/docs/Course/resources/","title":"Resources","section":"Docs","content":" Resources # VIM # Vimtutor. Web version of vimtutor that comes with VIM OpenVIM - learn VIM interactively Python # Python Tutorial "}]