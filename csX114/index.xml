<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on CS X114</title><link>https://uzak.github.com/csX114/</link><description>Recent content in Introduction on CS X114</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://uzak.github.com/csX114/index.xml" rel="self" type="application/rss+xml"/><item><title>02 Python and Data</title><link>https://uzak.github.com/csX114/docs/Course/02_python_and_data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/02_python_and_data/</guid><description>Python # Recap # Interactive Mode Scripts Syntax and structure Syntax: rules, how code must be written. Semantics: Meaning of a statement or instruction. print() input() Variables # A variable is a name that stores a value, acting as a reference to that value in memory. It allows you to reuse and manipulate data in your programs. Example:
x = 10 # Integer y = &amp;#34;Hello&amp;#34; # String z = 3.</description></item><item><title>03 Control Strutures and Loops</title><link>https://uzak.github.com/csX114/docs/Course/03_control_structures_and_loops/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/03_control_structures_and_loops/</guid><description>Conditionals # if Statement # Nested Conditions # Logical Operations in Conditions # if-else Statement # if-elif-else Statement # Loops # while # break and continue # for # range() function # nested loops # infinite loops # pass # Homework (graded) # conditionals # Create a calculator that will ask the user for operand1, operation (+/-/*/division), operand2 and will read the values, convert them to numbers and print the result</description></item><item><title>04 Algorithms</title><link>https://uzak.github.com/csX114/docs/Course/04_algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/04_algorithm/</guid><description>What Is an Algorithm? # An algorithm is a step-by-step set of instructions designed to perform a specific task or solve a particular problem. It is the foundation of all computer programs and is used to process data, make decisions, or automate repetitive tasks.
Daily Life Examples of Algorithm # Making a Cup of Tea:
Step 1: Fill the kettle with water. Step 2: Boil the water. Step 3: Place a tea bag in a cup.</description></item><item><title>05 Functions</title><link>https://uzak.github.com/csX114/docs/Course/05_functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/05_functions/</guid><description> basic function defintion arguments positional default arbitrary argument list keyword arguments docstring</description></item><item><title>06 Structures</title><link>https://uzak.github.com/csX114/docs/Course/06_structures/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/06_structures/</guid><description> tuple list set dict</description></item><item><title>07 Input/Output</title><link>https://uzak.github.com/csX114/docs/Course/07_io/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/07_io/</guid><description> string interpolation Console Files with</description></item><item><title>08 Errors and Exceptions</title><link>https://uzak.github.com/csX114/docs/Course/08_errors_and_exceptions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/08_errors_and_exceptions/</guid><description> Errors Exceptions Debugging Clean Code few rules</description></item><item><title>09 Modules</title><link>https://uzak.github.com/csX114/docs/Course/09_modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/09_modules/</guid><description> import Bateries Included: stdlib pypi</description></item><item><title>10 Fuctional Programming</title><link>https://uzak.github.com/csX114/docs/Course/11_fp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/11_fp/</guid><description> Functional Programming # filter reduce map list comprehension lambda functions generators</description></item><item><title>12 Object Oriented Programming</title><link>https://uzak.github.com/csX114/docs/Course/12_oop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/12_oop/</guid><description> Object Oriented Programming #</description></item><item><title>13 Road Map</title><link>https://uzak.github.com/csX114/docs/Course/13_road_map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/13_road_map/</guid><description> Road Map # venv</description></item><item><title>14 Project Presentation</title><link>https://uzak.github.com/csX114/docs/Course/14_presentation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/14_presentation/</guid><description>TBD</description></item><item><title>Projects</title><link>https://uzak.github.com/csX114/docs/Course/10_projects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/10_projects/</guid><description> Projects # Projects Git Basics Team Project 2 - 3 members</description></item><item><title>Resources</title><link>https://uzak.github.com/csX114/docs/Course/resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uzak.github.com/csX114/docs/Course/resources/</guid><description> Resources # VIM # Vimtutor. Web version of vimtutor that comes with VIM OpenVIM - learn VIM interactively Python # Python Tutorial</description></item></channel></rss>